// source: koinos/rpc/chain/chain_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.rpc.chain.chain_request');
goog.provide('proto.koinos.rpc.chain.chain_request.RequestCase');
goog.provide('proto.koinos.rpc.chain.chain_response');
goog.provide('proto.koinos.rpc.chain.chain_response.ResponseCase');
goog.provide('proto.koinos.rpc.chain.get_account_nonce_request');
goog.provide('proto.koinos.rpc.chain.get_account_nonce_response');
goog.provide('proto.koinos.rpc.chain.get_account_rc_request');
goog.provide('proto.koinos.rpc.chain.get_account_rc_response');
goog.provide('proto.koinos.rpc.chain.get_chain_id_request');
goog.provide('proto.koinos.rpc.chain.get_chain_id_response');
goog.provide('proto.koinos.rpc.chain.get_fork_heads_request');
goog.provide('proto.koinos.rpc.chain.get_fork_heads_response');
goog.provide('proto.koinos.rpc.chain.get_head_info_request');
goog.provide('proto.koinos.rpc.chain.get_head_info_response');
goog.provide('proto.koinos.rpc.chain.get_resource_limits_request');
goog.provide('proto.koinos.rpc.chain.get_resource_limits_response');
goog.provide('proto.koinos.rpc.chain.read_contract_request');
goog.provide('proto.koinos.rpc.chain.read_contract_response');
goog.provide('proto.koinos.rpc.chain.submit_block_request');
goog.provide('proto.koinos.rpc.chain.submit_block_response');
goog.provide('proto.koinos.rpc.chain.submit_transaction_request');
goog.provide('proto.koinos.rpc.chain.submit_transaction_response');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.koinos.block_topology');
goog.require('proto.koinos.chain.resource_limit_data');
goog.require('proto.koinos.protocol.block');
goog.require('proto.koinos.protocol.block_receipt');
goog.require('proto.koinos.protocol.transaction');
goog.require('proto.koinos.protocol.transaction_receipt');
goog.require('proto.koinos.rpc.error_response');
goog.require('proto.koinos.rpc.reserved_rpc');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.submit_block_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.submit_block_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.submit_block_request.displayName = 'proto.koinos.rpc.chain.submit_block_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.submit_block_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.submit_block_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.submit_block_response.displayName = 'proto.koinos.rpc.chain.submit_block_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.submit_transaction_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.submit_transaction_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.submit_transaction_request.displayName = 'proto.koinos.rpc.chain.submit_transaction_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.submit_transaction_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.submit_transaction_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.submit_transaction_response.displayName = 'proto.koinos.rpc.chain.submit_transaction_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_head_info_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_head_info_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_head_info_request.displayName = 'proto.koinos.rpc.chain.get_head_info_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_head_info_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_head_info_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_head_info_response.displayName = 'proto.koinos.rpc.chain.get_head_info_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_chain_id_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_chain_id_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_chain_id_request.displayName = 'proto.koinos.rpc.chain.get_chain_id_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_chain_id_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_chain_id_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_chain_id_response.displayName = 'proto.koinos.rpc.chain.get_chain_id_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_fork_heads_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_fork_heads_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_fork_heads_request.displayName = 'proto.koinos.rpc.chain.get_fork_heads_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_fork_heads_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.chain.get_fork_heads_response.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.chain.get_fork_heads_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_fork_heads_response.displayName = 'proto.koinos.rpc.chain.get_fork_heads_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.read_contract_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.read_contract_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.read_contract_request.displayName = 'proto.koinos.rpc.chain.read_contract_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.read_contract_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.chain.read_contract_response.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.chain.read_contract_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.read_contract_response.displayName = 'proto.koinos.rpc.chain.read_contract_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_account_nonce_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_account_nonce_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_account_nonce_request.displayName = 'proto.koinos.rpc.chain.get_account_nonce_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_account_nonce_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_account_nonce_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_account_nonce_response.displayName = 'proto.koinos.rpc.chain.get_account_nonce_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_account_rc_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_account_rc_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_account_rc_request.displayName = 'proto.koinos.rpc.chain.get_account_rc_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_account_rc_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_account_rc_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_account_rc_response.displayName = 'proto.koinos.rpc.chain.get_account_rc_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_resource_limits_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_resource_limits_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_resource_limits_request.displayName = 'proto.koinos.rpc.chain.get_resource_limits_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.get_resource_limits_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.chain.get_resource_limits_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.get_resource_limits_response.displayName = 'proto.koinos.rpc.chain.get_resource_limits_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.chain_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.rpc.chain.chain_request.oneofGroups_);
};
goog.inherits(proto.koinos.rpc.chain.chain_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.chain_request.displayName = 'proto.koinos.rpc.chain.chain_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.chain.chain_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.rpc.chain.chain_response.oneofGroups_);
};
goog.inherits(proto.koinos.rpc.chain.chain_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.chain.chain_response.displayName = 'proto.koinos.rpc.chain.chain_response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.submit_block_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.submit_block_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.submit_block_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_block_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.koinos.protocol.block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.submit_block_request}
 */
proto.koinos.rpc.chain.submit_block_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.submit_block_request;
  return proto.koinos.rpc.chain.submit_block_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.submit_block_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.submit_block_request}
 */
proto.koinos.rpc.chain.submit_block_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.block;
      reader.readMessage(value,proto.koinos.protocol.block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.submit_block_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.submit_block_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.submit_block_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_block_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.block.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.protocol.block block = 1;
 * @return {?proto.koinos.protocol.block}
 */
proto.koinos.rpc.chain.submit_block_request.prototype.getBlock = function() {
  return /** @type{?proto.koinos.protocol.block} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block, 1));
};


/**
 * @param {?proto.koinos.protocol.block|undefined} value
 * @return {!proto.koinos.rpc.chain.submit_block_request} returns this
*/
proto.koinos.rpc.chain.submit_block_request.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.submit_block_request} returns this
 */
proto.koinos.rpc.chain.submit_block_request.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.submit_block_request.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.submit_block_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.submit_block_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.submit_block_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_block_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: (f = msg.getReceipt()) && proto.koinos.protocol.block_receipt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.submit_block_response}
 */
proto.koinos.rpc.chain.submit_block_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.submit_block_response;
  return proto.koinos.rpc.chain.submit_block_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.submit_block_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.submit_block_response}
 */
proto.koinos.rpc.chain.submit_block_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.block_receipt;
      reader.readMessage(value,proto.koinos.protocol.block_receipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.submit_block_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.submit_block_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.submit_block_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_block_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.block_receipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.protocol.block_receipt receipt = 1;
 * @return {?proto.koinos.protocol.block_receipt}
 */
proto.koinos.rpc.chain.submit_block_response.prototype.getReceipt = function() {
  return /** @type{?proto.koinos.protocol.block_receipt} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block_receipt, 1));
};


/**
 * @param {?proto.koinos.protocol.block_receipt|undefined} value
 * @return {!proto.koinos.rpc.chain.submit_block_response} returns this
*/
proto.koinos.rpc.chain.submit_block_response.prototype.setReceipt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.submit_block_response} returns this
 */
proto.koinos.rpc.chain.submit_block_response.prototype.clearReceipt = function() {
  return this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.submit_block_response.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.submit_transaction_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.submit_transaction_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.submit_transaction_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_transaction_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.koinos.protocol.transaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.submit_transaction_request}
 */
proto.koinos.rpc.chain.submit_transaction_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.submit_transaction_request;
  return proto.koinos.rpc.chain.submit_transaction_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.submit_transaction_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.submit_transaction_request}
 */
proto.koinos.rpc.chain.submit_transaction_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.transaction;
      reader.readMessage(value,proto.koinos.protocol.transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.submit_transaction_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.submit_transaction_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.submit_transaction_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_transaction_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.protocol.transaction transaction = 1;
 * @return {?proto.koinos.protocol.transaction}
 */
proto.koinos.rpc.chain.submit_transaction_request.prototype.getTransaction = function() {
  return /** @type{?proto.koinos.protocol.transaction} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.transaction, 1));
};


/**
 * @param {?proto.koinos.protocol.transaction|undefined} value
 * @return {!proto.koinos.rpc.chain.submit_transaction_request} returns this
*/
proto.koinos.rpc.chain.submit_transaction_request.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.submit_transaction_request} returns this
 */
proto.koinos.rpc.chain.submit_transaction_request.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.submit_transaction_request.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.submit_transaction_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.submit_transaction_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.submit_transaction_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_transaction_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: (f = msg.getReceipt()) && proto.koinos.protocol.transaction_receipt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.submit_transaction_response}
 */
proto.koinos.rpc.chain.submit_transaction_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.submit_transaction_response;
  return proto.koinos.rpc.chain.submit_transaction_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.submit_transaction_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.submit_transaction_response}
 */
proto.koinos.rpc.chain.submit_transaction_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.transaction_receipt;
      reader.readMessage(value,proto.koinos.protocol.transaction_receipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.submit_transaction_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.submit_transaction_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.submit_transaction_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.submit_transaction_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.transaction_receipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.protocol.transaction_receipt receipt = 1;
 * @return {?proto.koinos.protocol.transaction_receipt}
 */
proto.koinos.rpc.chain.submit_transaction_response.prototype.getReceipt = function() {
  return /** @type{?proto.koinos.protocol.transaction_receipt} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.transaction_receipt, 1));
};


/**
 * @param {?proto.koinos.protocol.transaction_receipt|undefined} value
 * @return {!proto.koinos.rpc.chain.submit_transaction_response} returns this
*/
proto.koinos.rpc.chain.submit_transaction_response.prototype.setReceipt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.submit_transaction_response} returns this
 */
proto.koinos.rpc.chain.submit_transaction_response.prototype.clearReceipt = function() {
  return this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.submit_transaction_response.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_head_info_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_head_info_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_head_info_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_head_info_request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_head_info_request}
 */
proto.koinos.rpc.chain.get_head_info_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_head_info_request;
  return proto.koinos.rpc.chain.get_head_info_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_head_info_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_head_info_request}
 */
proto.koinos.rpc.chain.get_head_info_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_head_info_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_head_info_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_head_info_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_head_info_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_head_info_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_head_info_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_head_info_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    headTopology: (f = msg.getHeadTopology()) && proto.koinos.block_topology.toObject(includeInstance, f),
    lastIrreversibleBlock: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    headStateMerkleRoot: msg.getHeadStateMerkleRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_head_info_response}
 */
proto.koinos.rpc.chain.get_head_info_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_head_info_response;
  return proto.koinos.rpc.chain.get_head_info_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_head_info_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_head_info_response}
 */
proto.koinos.rpc.chain.get_head_info_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.block_topology;
      reader.readMessage(value,proto.koinos.block_topology.deserializeBinaryFromReader);
      msg.setHeadTopology(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLastIrreversibleBlock(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadStateMerkleRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_head_info_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_head_info_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_head_info_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadTopology();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.block_topology.serializeBinaryToWriter
    );
  }
  f = message.getLastIrreversibleBlock();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getHeadStateMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional koinos.block_topology head_topology = 1;
 * @return {?proto.koinos.block_topology}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.getHeadTopology = function() {
  return /** @type{?proto.koinos.block_topology} */ (
    jspb.Message.getWrapperField(this, proto.koinos.block_topology, 1));
};


/**
 * @param {?proto.koinos.block_topology|undefined} value
 * @return {!proto.koinos.rpc.chain.get_head_info_response} returns this
*/
proto.koinos.rpc.chain.get_head_info_response.prototype.setHeadTopology = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.get_head_info_response} returns this
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.clearHeadTopology = function() {
  return this.setHeadTopology(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.hasHeadTopology = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 last_irreversible_block = 2;
 * @return {string}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.getLastIrreversibleBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.rpc.chain.get_head_info_response} returns this
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.setLastIrreversibleBlock = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bytes head_state_merkle_root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.getHeadStateMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes head_state_merkle_root = 3;
 * This is a type-conversion wrapper around `getHeadStateMerkleRoot()`
 * @return {string}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.getHeadStateMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadStateMerkleRoot()));
};


/**
 * optional bytes head_state_merkle_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadStateMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.getHeadStateMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadStateMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.get_head_info_response} returns this
 */
proto.koinos.rpc.chain.get_head_info_response.prototype.setHeadStateMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_chain_id_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_chain_id_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_chain_id_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_chain_id_request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_chain_id_request}
 */
proto.koinos.rpc.chain.get_chain_id_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_chain_id_request;
  return proto.koinos.rpc.chain.get_chain_id_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_chain_id_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_chain_id_request}
 */
proto.koinos.rpc.chain.get_chain_id_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_chain_id_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_chain_id_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_chain_id_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_chain_id_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_chain_id_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_chain_id_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_chain_id_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_chain_id_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: msg.getChainId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_chain_id_response}
 */
proto.koinos.rpc.chain.get_chain_id_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_chain_id_response;
  return proto.koinos.rpc.chain.get_chain_id_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_chain_id_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_chain_id_response}
 */
proto.koinos.rpc.chain.get_chain_id_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_chain_id_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_chain_id_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_chain_id_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_chain_id_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chain_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.get_chain_id_response.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chain_id = 1;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.koinos.rpc.chain.get_chain_id_response.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_chain_id_response.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.get_chain_id_response} returns this
 */
proto.koinos.rpc.chain.get_chain_id_response.prototype.setChainId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_fork_heads_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_fork_heads_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_fork_heads_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_fork_heads_request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_fork_heads_request}
 */
proto.koinos.rpc.chain.get_fork_heads_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_fork_heads_request;
  return proto.koinos.rpc.chain.get_fork_heads_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_fork_heads_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_fork_heads_request}
 */
proto.koinos.rpc.chain.get_fork_heads_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_fork_heads_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_fork_heads_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_fork_heads_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_fork_heads_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.chain.get_fork_heads_response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_fork_heads_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_fork_heads_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_fork_heads_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastIrreversibleBlock: (f = msg.getLastIrreversibleBlock()) && proto.koinos.block_topology.toObject(includeInstance, f),
    forkHeadsList: jspb.Message.toObjectList(msg.getForkHeadsList(),
    proto.koinos.block_topology.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_fork_heads_response}
 */
proto.koinos.rpc.chain.get_fork_heads_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_fork_heads_response;
  return proto.koinos.rpc.chain.get_fork_heads_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_fork_heads_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_fork_heads_response}
 */
proto.koinos.rpc.chain.get_fork_heads_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.block_topology;
      reader.readMessage(value,proto.koinos.block_topology.deserializeBinaryFromReader);
      msg.setLastIrreversibleBlock(value);
      break;
    case 2:
      var value = new proto.koinos.block_topology;
      reader.readMessage(value,proto.koinos.block_topology.deserializeBinaryFromReader);
      msg.addForkHeads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_fork_heads_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_fork_heads_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_fork_heads_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastIrreversibleBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.block_topology.serializeBinaryToWriter
    );
  }
  f = message.getForkHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.koinos.block_topology.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.block_topology last_irreversible_block = 1;
 * @return {?proto.koinos.block_topology}
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.getLastIrreversibleBlock = function() {
  return /** @type{?proto.koinos.block_topology} */ (
    jspb.Message.getWrapperField(this, proto.koinos.block_topology, 1));
};


/**
 * @param {?proto.koinos.block_topology|undefined} value
 * @return {!proto.koinos.rpc.chain.get_fork_heads_response} returns this
*/
proto.koinos.rpc.chain.get_fork_heads_response.prototype.setLastIrreversibleBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.get_fork_heads_response} returns this
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.clearLastIrreversibleBlock = function() {
  return this.setLastIrreversibleBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.hasLastIrreversibleBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated koinos.block_topology fork_heads = 2;
 * @return {!Array<!proto.koinos.block_topology>}
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.getForkHeadsList = function() {
  return /** @type{!Array<!proto.koinos.block_topology>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.block_topology, 2));
};


/**
 * @param {!Array<!proto.koinos.block_topology>} value
 * @return {!proto.koinos.rpc.chain.get_fork_heads_response} returns this
*/
proto.koinos.rpc.chain.get_fork_heads_response.prototype.setForkHeadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.koinos.block_topology=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.block_topology}
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.addForkHeads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.koinos.block_topology, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.chain.get_fork_heads_response} returns this
 */
proto.koinos.rpc.chain.get_fork_heads_response.prototype.clearForkHeadsList = function() {
  return this.setForkHeadsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.read_contract_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.read_contract_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.read_contract_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    entryPoint: jspb.Message.getFieldWithDefault(msg, 2, 0),
    args: msg.getArgs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.read_contract_request}
 */
proto.koinos.rpc.chain.read_contract_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.read_contract_request;
  return proto.koinos.rpc.chain.read_contract_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.read_contract_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.read_contract_request}
 */
proto.koinos.rpc.chain.read_contract_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntryPoint(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.read_contract_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.read_contract_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.read_contract_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntryPoint();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getArgs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.read_contract_request} returns this
 */
proto.koinos.rpc.chain.read_contract_request.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 entry_point = 2;
 * @return {number}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getEntryPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.rpc.chain.read_contract_request} returns this
 */
proto.koinos.rpc.chain.read_contract_request.prototype.setEntryPoint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes args = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getArgs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes args = 3;
 * This is a type-conversion wrapper around `getArgs()`
 * @return {string}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getArgs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArgs()));
};


/**
 * optional bytes args = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgs()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.read_contract_request.prototype.getArgs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArgs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.read_contract_request} returns this
 */
proto.koinos.rpc.chain.read_contract_request.prototype.setArgs = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.chain.read_contract_response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.read_contract_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.read_contract_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.read_contract_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.read_contract_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult_asB64(),
    logsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.read_contract_response}
 */
proto.koinos.rpc.chain.read_contract_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.read_contract_response;
  return proto.koinos.rpc.chain.read_contract_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.read_contract_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.read_contract_response}
 */
proto.koinos.rpc.chain.read_contract_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.read_contract_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.read_contract_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.read_contract_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.read_contract_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bytes result = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.read_contract_response.prototype.getResult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes result = 1;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.koinos.rpc.chain.read_contract_response.prototype.getResult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResult()));
};


/**
 * optional bytes result = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.read_contract_response.prototype.getResult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResult()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.read_contract_response} returns this
 */
proto.koinos.rpc.chain.read_contract_response.prototype.setResult = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated string logs = 2;
 * @return {!Array<string>}
 */
proto.koinos.rpc.chain.read_contract_response.prototype.getLogsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.koinos.rpc.chain.read_contract_response} returns this
 */
proto.koinos.rpc.chain.read_contract_response.prototype.setLogsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.koinos.rpc.chain.read_contract_response} returns this
 */
proto.koinos.rpc.chain.read_contract_response.prototype.addLogs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.chain.read_contract_response} returns this
 */
proto.koinos.rpc.chain.read_contract_response.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_account_nonce_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_account_nonce_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_account_nonce_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_nonce_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_account_nonce_request}
 */
proto.koinos.rpc.chain.get_account_nonce_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_account_nonce_request;
  return proto.koinos.rpc.chain.get_account_nonce_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_account_nonce_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_account_nonce_request}
 */
proto.koinos.rpc.chain.get_account_nonce_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_account_nonce_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_account_nonce_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_account_nonce_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_nonce_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.get_account_nonce_request.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.koinos.rpc.chain.get_account_nonce_request.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_account_nonce_request.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.get_account_nonce_request} returns this
 */
proto.koinos.rpc.chain.get_account_nonce_request.prototype.setAccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_account_nonce_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_account_nonce_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_account_nonce_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_nonce_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_account_nonce_response}
 */
proto.koinos.rpc.chain.get_account_nonce_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_account_nonce_response;
  return proto.koinos.rpc.chain.get_account_nonce_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_account_nonce_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_account_nonce_response}
 */
proto.koinos.rpc.chain.get_account_nonce_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_account_nonce_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_account_nonce_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_account_nonce_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_nonce_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {string}
 */
proto.koinos.rpc.chain.get_account_nonce_response.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.rpc.chain.get_account_nonce_response} returns this
 */
proto.koinos.rpc.chain.get_account_nonce_response.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_account_rc_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_account_rc_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_account_rc_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_rc_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_account_rc_request}
 */
proto.koinos.rpc.chain.get_account_rc_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_account_rc_request;
  return proto.koinos.rpc.chain.get_account_rc_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_account_rc_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_account_rc_request}
 */
proto.koinos.rpc.chain.get_account_rc_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_account_rc_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_account_rc_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_account_rc_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_rc_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.chain.get_account_rc_request.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.koinos.rpc.chain.get_account_rc_request.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_account_rc_request.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.chain.get_account_rc_request} returns this
 */
proto.koinos.rpc.chain.get_account_rc_request.prototype.setAccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_account_rc_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_account_rc_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_account_rc_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_rc_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    rc: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_account_rc_response}
 */
proto.koinos.rpc.chain.get_account_rc_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_account_rc_response;
  return proto.koinos.rpc.chain.get_account_rc_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_account_rc_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_account_rc_response}
 */
proto.koinos.rpc.chain.get_account_rc_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_account_rc_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_account_rc_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_account_rc_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_account_rc_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRc();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 rc = 1;
 * @return {string}
 */
proto.koinos.rpc.chain.get_account_rc_response.prototype.getRc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.rpc.chain.get_account_rc_response} returns this
 */
proto.koinos.rpc.chain.get_account_rc_response.prototype.setRc = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_resource_limits_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_resource_limits_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_resource_limits_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_resource_limits_request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_resource_limits_request}
 */
proto.koinos.rpc.chain.get_resource_limits_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_resource_limits_request;
  return proto.koinos.rpc.chain.get_resource_limits_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_resource_limits_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_resource_limits_request}
 */
proto.koinos.rpc.chain.get_resource_limits_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_resource_limits_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_resource_limits_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_resource_limits_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_resource_limits_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.get_resource_limits_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.get_resource_limits_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.get_resource_limits_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_resource_limits_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceLimitData: (f = msg.getResourceLimitData()) && proto.koinos.chain.resource_limit_data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.get_resource_limits_response}
 */
proto.koinos.rpc.chain.get_resource_limits_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.get_resource_limits_response;
  return proto.koinos.rpc.chain.get_resource_limits_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.get_resource_limits_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.get_resource_limits_response}
 */
proto.koinos.rpc.chain.get_resource_limits_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.chain.resource_limit_data;
      reader.readMessage(value,proto.koinos.chain.resource_limit_data.deserializeBinaryFromReader);
      msg.setResourceLimitData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.get_resource_limits_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.get_resource_limits_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.get_resource_limits_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.get_resource_limits_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceLimitData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.chain.resource_limit_data.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.chain.resource_limit_data resource_limit_data = 1;
 * @return {?proto.koinos.chain.resource_limit_data}
 */
proto.koinos.rpc.chain.get_resource_limits_response.prototype.getResourceLimitData = function() {
  return /** @type{?proto.koinos.chain.resource_limit_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.chain.resource_limit_data, 1));
};


/**
 * @param {?proto.koinos.chain.resource_limit_data|undefined} value
 * @return {!proto.koinos.rpc.chain.get_resource_limits_response} returns this
*/
proto.koinos.rpc.chain.get_resource_limits_response.prototype.setResourceLimitData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.get_resource_limits_response} returns this
 */
proto.koinos.rpc.chain.get_resource_limits_response.prototype.clearResourceLimitData = function() {
  return this.setResourceLimitData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.get_resource_limits_response.prototype.hasResourceLimitData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.rpc.chain.chain_request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.koinos.rpc.chain.chain_request.RequestCase = {
  REQUEST_NOT_SET: 0,
  RESERVED: 1,
  SUBMIT_BLOCK: 2,
  SUBMIT_TRANSACTION: 3,
  GET_HEAD_INFO: 4,
  GET_CHAIN_ID: 5,
  GET_FORK_HEADS: 6,
  READ_CONTRACT: 7,
  GET_ACCOUNT_NONCE: 8,
  GET_ACCOUNT_RC: 9,
  GET_RESOURCE_LIMITS: 10
};

/**
 * @return {proto.koinos.rpc.chain.chain_request.RequestCase}
 */
proto.koinos.rpc.chain.chain_request.prototype.getRequestCase = function() {
  return /** @type {proto.koinos.rpc.chain.chain_request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.koinos.rpc.chain.chain_request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.chain_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.chain_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.chain_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.chain_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: (f = msg.getReserved()) && proto.koinos.rpc.reserved_rpc.toObject(includeInstance, f),
    submitBlock: (f = msg.getSubmitBlock()) && proto.koinos.rpc.chain.submit_block_request.toObject(includeInstance, f),
    submitTransaction: (f = msg.getSubmitTransaction()) && proto.koinos.rpc.chain.submit_transaction_request.toObject(includeInstance, f),
    getHeadInfo: (f = msg.getGetHeadInfo()) && proto.koinos.rpc.chain.get_head_info_request.toObject(includeInstance, f),
    getChainId: (f = msg.getGetChainId()) && proto.koinos.rpc.chain.get_chain_id_request.toObject(includeInstance, f),
    getForkHeads: (f = msg.getGetForkHeads()) && proto.koinos.rpc.chain.get_fork_heads_request.toObject(includeInstance, f),
    readContract: (f = msg.getReadContract()) && proto.koinos.rpc.chain.read_contract_request.toObject(includeInstance, f),
    getAccountNonce: (f = msg.getGetAccountNonce()) && proto.koinos.rpc.chain.get_account_nonce_request.toObject(includeInstance, f),
    getAccountRc: (f = msg.getGetAccountRc()) && proto.koinos.rpc.chain.get_account_rc_request.toObject(includeInstance, f),
    getResourceLimits: (f = msg.getGetResourceLimits()) && proto.koinos.rpc.chain.get_resource_limits_request.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.chain_request}
 */
proto.koinos.rpc.chain.chain_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.chain_request;
  return proto.koinos.rpc.chain.chain_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.chain_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.chain_request}
 */
proto.koinos.rpc.chain.chain_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.rpc.reserved_rpc;
      reader.readMessage(value,proto.koinos.rpc.reserved_rpc.deserializeBinaryFromReader);
      msg.setReserved(value);
      break;
    case 2:
      var value = new proto.koinos.rpc.chain.submit_block_request;
      reader.readMessage(value,proto.koinos.rpc.chain.submit_block_request.deserializeBinaryFromReader);
      msg.setSubmitBlock(value);
      break;
    case 3:
      var value = new proto.koinos.rpc.chain.submit_transaction_request;
      reader.readMessage(value,proto.koinos.rpc.chain.submit_transaction_request.deserializeBinaryFromReader);
      msg.setSubmitTransaction(value);
      break;
    case 4:
      var value = new proto.koinos.rpc.chain.get_head_info_request;
      reader.readMessage(value,proto.koinos.rpc.chain.get_head_info_request.deserializeBinaryFromReader);
      msg.setGetHeadInfo(value);
      break;
    case 5:
      var value = new proto.koinos.rpc.chain.get_chain_id_request;
      reader.readMessage(value,proto.koinos.rpc.chain.get_chain_id_request.deserializeBinaryFromReader);
      msg.setGetChainId(value);
      break;
    case 6:
      var value = new proto.koinos.rpc.chain.get_fork_heads_request;
      reader.readMessage(value,proto.koinos.rpc.chain.get_fork_heads_request.deserializeBinaryFromReader);
      msg.setGetForkHeads(value);
      break;
    case 7:
      var value = new proto.koinos.rpc.chain.read_contract_request;
      reader.readMessage(value,proto.koinos.rpc.chain.read_contract_request.deserializeBinaryFromReader);
      msg.setReadContract(value);
      break;
    case 8:
      var value = new proto.koinos.rpc.chain.get_account_nonce_request;
      reader.readMessage(value,proto.koinos.rpc.chain.get_account_nonce_request.deserializeBinaryFromReader);
      msg.setGetAccountNonce(value);
      break;
    case 9:
      var value = new proto.koinos.rpc.chain.get_account_rc_request;
      reader.readMessage(value,proto.koinos.rpc.chain.get_account_rc_request.deserializeBinaryFromReader);
      msg.setGetAccountRc(value);
      break;
    case 10:
      var value = new proto.koinos.rpc.chain.get_resource_limits_request;
      reader.readMessage(value,proto.koinos.rpc.chain.get_resource_limits_request.deserializeBinaryFromReader);
      msg.setGetResourceLimits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.chain_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.chain_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.chain_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.chain_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.rpc.reserved_rpc.serializeBinaryToWriter
    );
  }
  f = message.getSubmitBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.rpc.chain.submit_block_request.serializeBinaryToWriter
    );
  }
  f = message.getSubmitTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.rpc.chain.submit_transaction_request.serializeBinaryToWriter
    );
  }
  f = message.getGetHeadInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.koinos.rpc.chain.get_head_info_request.serializeBinaryToWriter
    );
  }
  f = message.getGetChainId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.koinos.rpc.chain.get_chain_id_request.serializeBinaryToWriter
    );
  }
  f = message.getGetForkHeads();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.koinos.rpc.chain.get_fork_heads_request.serializeBinaryToWriter
    );
  }
  f = message.getReadContract();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.koinos.rpc.chain.read_contract_request.serializeBinaryToWriter
    );
  }
  f = message.getGetAccountNonce();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.koinos.rpc.chain.get_account_nonce_request.serializeBinaryToWriter
    );
  }
  f = message.getGetAccountRc();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.koinos.rpc.chain.get_account_rc_request.serializeBinaryToWriter
    );
  }
  f = message.getGetResourceLimits();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.koinos.rpc.chain.get_resource_limits_request.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.rpc.reserved_rpc reserved = 1;
 * @return {?proto.koinos.rpc.reserved_rpc}
 */
proto.koinos.rpc.chain.chain_request.prototype.getReserved = function() {
  return /** @type{?proto.koinos.rpc.reserved_rpc} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.reserved_rpc, 1));
};


/**
 * @param {?proto.koinos.rpc.reserved_rpc|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setReserved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearReserved = function() {
  return this.setReserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional submit_block_request submit_block = 2;
 * @return {?proto.koinos.rpc.chain.submit_block_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getSubmitBlock = function() {
  return /** @type{?proto.koinos.rpc.chain.submit_block_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.submit_block_request, 2));
};


/**
 * @param {?proto.koinos.rpc.chain.submit_block_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setSubmitBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearSubmitBlock = function() {
  return this.setSubmitBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasSubmitBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional submit_transaction_request submit_transaction = 3;
 * @return {?proto.koinos.rpc.chain.submit_transaction_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getSubmitTransaction = function() {
  return /** @type{?proto.koinos.rpc.chain.submit_transaction_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.submit_transaction_request, 3));
};


/**
 * @param {?proto.koinos.rpc.chain.submit_transaction_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setSubmitTransaction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearSubmitTransaction = function() {
  return this.setSubmitTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasSubmitTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional get_head_info_request get_head_info = 4;
 * @return {?proto.koinos.rpc.chain.get_head_info_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getGetHeadInfo = function() {
  return /** @type{?proto.koinos.rpc.chain.get_head_info_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_head_info_request, 4));
};


/**
 * @param {?proto.koinos.rpc.chain.get_head_info_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setGetHeadInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearGetHeadInfo = function() {
  return this.setGetHeadInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasGetHeadInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional get_chain_id_request get_chain_id = 5;
 * @return {?proto.koinos.rpc.chain.get_chain_id_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getGetChainId = function() {
  return /** @type{?proto.koinos.rpc.chain.get_chain_id_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_chain_id_request, 5));
};


/**
 * @param {?proto.koinos.rpc.chain.get_chain_id_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setGetChainId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearGetChainId = function() {
  return this.setGetChainId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasGetChainId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional get_fork_heads_request get_fork_heads = 6;
 * @return {?proto.koinos.rpc.chain.get_fork_heads_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getGetForkHeads = function() {
  return /** @type{?proto.koinos.rpc.chain.get_fork_heads_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_fork_heads_request, 6));
};


/**
 * @param {?proto.koinos.rpc.chain.get_fork_heads_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setGetForkHeads = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearGetForkHeads = function() {
  return this.setGetForkHeads(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasGetForkHeads = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional read_contract_request read_contract = 7;
 * @return {?proto.koinos.rpc.chain.read_contract_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getReadContract = function() {
  return /** @type{?proto.koinos.rpc.chain.read_contract_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.read_contract_request, 7));
};


/**
 * @param {?proto.koinos.rpc.chain.read_contract_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setReadContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearReadContract = function() {
  return this.setReadContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasReadContract = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional get_account_nonce_request get_account_nonce = 8;
 * @return {?proto.koinos.rpc.chain.get_account_nonce_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getGetAccountNonce = function() {
  return /** @type{?proto.koinos.rpc.chain.get_account_nonce_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_account_nonce_request, 8));
};


/**
 * @param {?proto.koinos.rpc.chain.get_account_nonce_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setGetAccountNonce = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearGetAccountNonce = function() {
  return this.setGetAccountNonce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasGetAccountNonce = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional get_account_rc_request get_account_rc = 9;
 * @return {?proto.koinos.rpc.chain.get_account_rc_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getGetAccountRc = function() {
  return /** @type{?proto.koinos.rpc.chain.get_account_rc_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_account_rc_request, 9));
};


/**
 * @param {?proto.koinos.rpc.chain.get_account_rc_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setGetAccountRc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearGetAccountRc = function() {
  return this.setGetAccountRc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasGetAccountRc = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional get_resource_limits_request get_resource_limits = 10;
 * @return {?proto.koinos.rpc.chain.get_resource_limits_request}
 */
proto.koinos.rpc.chain.chain_request.prototype.getGetResourceLimits = function() {
  return /** @type{?proto.koinos.rpc.chain.get_resource_limits_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_resource_limits_request, 10));
};


/**
 * @param {?proto.koinos.rpc.chain.get_resource_limits_request|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
*/
proto.koinos.rpc.chain.chain_request.prototype.setGetResourceLimits = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.koinos.rpc.chain.chain_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_request} returns this
 */
proto.koinos.rpc.chain.chain_request.prototype.clearGetResourceLimits = function() {
  return this.setGetResourceLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_request.prototype.hasGetResourceLimits = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.rpc.chain.chain_response.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.koinos.rpc.chain.chain_response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  RESERVED: 1,
  ERROR: 2,
  SUBMIT_BLOCK: 3,
  SUBMIT_TRANSACTION: 4,
  GET_HEAD_INFO: 5,
  GET_CHAIN_ID: 6,
  GET_FORK_HEADS: 7,
  READ_CONTRACT: 8,
  GET_ACCOUNT_NONCE: 9,
  GET_ACCOUNT_RC: 10,
  GET_RESOURCE_LIMITS: 11
};

/**
 * @return {proto.koinos.rpc.chain.chain_response.ResponseCase}
 */
proto.koinos.rpc.chain.chain_response.prototype.getResponseCase = function() {
  return /** @type {proto.koinos.rpc.chain.chain_response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.koinos.rpc.chain.chain_response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.chain.chain_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.chain.chain_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.chain.chain_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.chain_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: (f = msg.getReserved()) && proto.koinos.rpc.reserved_rpc.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.koinos.rpc.error_response.toObject(includeInstance, f),
    submitBlock: (f = msg.getSubmitBlock()) && proto.koinos.rpc.chain.submit_block_response.toObject(includeInstance, f),
    submitTransaction: (f = msg.getSubmitTransaction()) && proto.koinos.rpc.chain.submit_transaction_response.toObject(includeInstance, f),
    getHeadInfo: (f = msg.getGetHeadInfo()) && proto.koinos.rpc.chain.get_head_info_response.toObject(includeInstance, f),
    getChainId: (f = msg.getGetChainId()) && proto.koinos.rpc.chain.get_chain_id_response.toObject(includeInstance, f),
    getForkHeads: (f = msg.getGetForkHeads()) && proto.koinos.rpc.chain.get_fork_heads_response.toObject(includeInstance, f),
    readContract: (f = msg.getReadContract()) && proto.koinos.rpc.chain.read_contract_response.toObject(includeInstance, f),
    getAccountNonce: (f = msg.getGetAccountNonce()) && proto.koinos.rpc.chain.get_account_nonce_response.toObject(includeInstance, f),
    getAccountRc: (f = msg.getGetAccountRc()) && proto.koinos.rpc.chain.get_account_rc_response.toObject(includeInstance, f),
    getResourceLimits: (f = msg.getGetResourceLimits()) && proto.koinos.rpc.chain.get_resource_limits_response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.chain.chain_response}
 */
proto.koinos.rpc.chain.chain_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.chain.chain_response;
  return proto.koinos.rpc.chain.chain_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.chain.chain_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.chain.chain_response}
 */
proto.koinos.rpc.chain.chain_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.rpc.reserved_rpc;
      reader.readMessage(value,proto.koinos.rpc.reserved_rpc.deserializeBinaryFromReader);
      msg.setReserved(value);
      break;
    case 2:
      var value = new proto.koinos.rpc.error_response;
      reader.readMessage(value,proto.koinos.rpc.error_response.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.koinos.rpc.chain.submit_block_response;
      reader.readMessage(value,proto.koinos.rpc.chain.submit_block_response.deserializeBinaryFromReader);
      msg.setSubmitBlock(value);
      break;
    case 4:
      var value = new proto.koinos.rpc.chain.submit_transaction_response;
      reader.readMessage(value,proto.koinos.rpc.chain.submit_transaction_response.deserializeBinaryFromReader);
      msg.setSubmitTransaction(value);
      break;
    case 5:
      var value = new proto.koinos.rpc.chain.get_head_info_response;
      reader.readMessage(value,proto.koinos.rpc.chain.get_head_info_response.deserializeBinaryFromReader);
      msg.setGetHeadInfo(value);
      break;
    case 6:
      var value = new proto.koinos.rpc.chain.get_chain_id_response;
      reader.readMessage(value,proto.koinos.rpc.chain.get_chain_id_response.deserializeBinaryFromReader);
      msg.setGetChainId(value);
      break;
    case 7:
      var value = new proto.koinos.rpc.chain.get_fork_heads_response;
      reader.readMessage(value,proto.koinos.rpc.chain.get_fork_heads_response.deserializeBinaryFromReader);
      msg.setGetForkHeads(value);
      break;
    case 8:
      var value = new proto.koinos.rpc.chain.read_contract_response;
      reader.readMessage(value,proto.koinos.rpc.chain.read_contract_response.deserializeBinaryFromReader);
      msg.setReadContract(value);
      break;
    case 9:
      var value = new proto.koinos.rpc.chain.get_account_nonce_response;
      reader.readMessage(value,proto.koinos.rpc.chain.get_account_nonce_response.deserializeBinaryFromReader);
      msg.setGetAccountNonce(value);
      break;
    case 10:
      var value = new proto.koinos.rpc.chain.get_account_rc_response;
      reader.readMessage(value,proto.koinos.rpc.chain.get_account_rc_response.deserializeBinaryFromReader);
      msg.setGetAccountRc(value);
      break;
    case 11:
      var value = new proto.koinos.rpc.chain.get_resource_limits_response;
      reader.readMessage(value,proto.koinos.rpc.chain.get_resource_limits_response.deserializeBinaryFromReader);
      msg.setGetResourceLimits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.chain.chain_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.chain.chain_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.chain.chain_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.chain.chain_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.rpc.reserved_rpc.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.rpc.error_response.serializeBinaryToWriter
    );
  }
  f = message.getSubmitBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.rpc.chain.submit_block_response.serializeBinaryToWriter
    );
  }
  f = message.getSubmitTransaction();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.koinos.rpc.chain.submit_transaction_response.serializeBinaryToWriter
    );
  }
  f = message.getGetHeadInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.koinos.rpc.chain.get_head_info_response.serializeBinaryToWriter
    );
  }
  f = message.getGetChainId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.koinos.rpc.chain.get_chain_id_response.serializeBinaryToWriter
    );
  }
  f = message.getGetForkHeads();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.koinos.rpc.chain.get_fork_heads_response.serializeBinaryToWriter
    );
  }
  f = message.getReadContract();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.koinos.rpc.chain.read_contract_response.serializeBinaryToWriter
    );
  }
  f = message.getGetAccountNonce();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.koinos.rpc.chain.get_account_nonce_response.serializeBinaryToWriter
    );
  }
  f = message.getGetAccountRc();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.koinos.rpc.chain.get_account_rc_response.serializeBinaryToWriter
    );
  }
  f = message.getGetResourceLimits();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.koinos.rpc.chain.get_resource_limits_response.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.rpc.reserved_rpc reserved = 1;
 * @return {?proto.koinos.rpc.reserved_rpc}
 */
proto.koinos.rpc.chain.chain_response.prototype.getReserved = function() {
  return /** @type{?proto.koinos.rpc.reserved_rpc} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.reserved_rpc, 1));
};


/**
 * @param {?proto.koinos.rpc.reserved_rpc|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setReserved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearReserved = function() {
  return this.setReserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional koinos.rpc.error_response error = 2;
 * @return {?proto.koinos.rpc.error_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getError = function() {
  return /** @type{?proto.koinos.rpc.error_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.error_response, 2));
};


/**
 * @param {?proto.koinos.rpc.error_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional submit_block_response submit_block = 3;
 * @return {?proto.koinos.rpc.chain.submit_block_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getSubmitBlock = function() {
  return /** @type{?proto.koinos.rpc.chain.submit_block_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.submit_block_response, 3));
};


/**
 * @param {?proto.koinos.rpc.chain.submit_block_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setSubmitBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearSubmitBlock = function() {
  return this.setSubmitBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasSubmitBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional submit_transaction_response submit_transaction = 4;
 * @return {?proto.koinos.rpc.chain.submit_transaction_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getSubmitTransaction = function() {
  return /** @type{?proto.koinos.rpc.chain.submit_transaction_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.submit_transaction_response, 4));
};


/**
 * @param {?proto.koinos.rpc.chain.submit_transaction_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setSubmitTransaction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearSubmitTransaction = function() {
  return this.setSubmitTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasSubmitTransaction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional get_head_info_response get_head_info = 5;
 * @return {?proto.koinos.rpc.chain.get_head_info_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getGetHeadInfo = function() {
  return /** @type{?proto.koinos.rpc.chain.get_head_info_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_head_info_response, 5));
};


/**
 * @param {?proto.koinos.rpc.chain.get_head_info_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setGetHeadInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearGetHeadInfo = function() {
  return this.setGetHeadInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasGetHeadInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional get_chain_id_response get_chain_id = 6;
 * @return {?proto.koinos.rpc.chain.get_chain_id_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getGetChainId = function() {
  return /** @type{?proto.koinos.rpc.chain.get_chain_id_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_chain_id_response, 6));
};


/**
 * @param {?proto.koinos.rpc.chain.get_chain_id_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setGetChainId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearGetChainId = function() {
  return this.setGetChainId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasGetChainId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional get_fork_heads_response get_fork_heads = 7;
 * @return {?proto.koinos.rpc.chain.get_fork_heads_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getGetForkHeads = function() {
  return /** @type{?proto.koinos.rpc.chain.get_fork_heads_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_fork_heads_response, 7));
};


/**
 * @param {?proto.koinos.rpc.chain.get_fork_heads_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setGetForkHeads = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearGetForkHeads = function() {
  return this.setGetForkHeads(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasGetForkHeads = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional read_contract_response read_contract = 8;
 * @return {?proto.koinos.rpc.chain.read_contract_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getReadContract = function() {
  return /** @type{?proto.koinos.rpc.chain.read_contract_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.read_contract_response, 8));
};


/**
 * @param {?proto.koinos.rpc.chain.read_contract_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setReadContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearReadContract = function() {
  return this.setReadContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasReadContract = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional get_account_nonce_response get_account_nonce = 9;
 * @return {?proto.koinos.rpc.chain.get_account_nonce_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getGetAccountNonce = function() {
  return /** @type{?proto.koinos.rpc.chain.get_account_nonce_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_account_nonce_response, 9));
};


/**
 * @param {?proto.koinos.rpc.chain.get_account_nonce_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setGetAccountNonce = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearGetAccountNonce = function() {
  return this.setGetAccountNonce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasGetAccountNonce = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional get_account_rc_response get_account_rc = 10;
 * @return {?proto.koinos.rpc.chain.get_account_rc_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getGetAccountRc = function() {
  return /** @type{?proto.koinos.rpc.chain.get_account_rc_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_account_rc_response, 10));
};


/**
 * @param {?proto.koinos.rpc.chain.get_account_rc_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setGetAccountRc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearGetAccountRc = function() {
  return this.setGetAccountRc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasGetAccountRc = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional get_resource_limits_response get_resource_limits = 11;
 * @return {?proto.koinos.rpc.chain.get_resource_limits_response}
 */
proto.koinos.rpc.chain.chain_response.prototype.getGetResourceLimits = function() {
  return /** @type{?proto.koinos.rpc.chain.get_resource_limits_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.chain.get_resource_limits_response, 11));
};


/**
 * @param {?proto.koinos.rpc.chain.get_resource_limits_response|undefined} value
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
*/
proto.koinos.rpc.chain.chain_response.prototype.setGetResourceLimits = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.koinos.rpc.chain.chain_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.chain.chain_response} returns this
 */
proto.koinos.rpc.chain.chain_response.prototype.clearGetResourceLimits = function() {
  return this.setGetResourceLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.chain.chain_response.prototype.hasGetResourceLimits = function() {
  return jspb.Message.getField(this, 11) != null;
};


