// source: koinos/rpc/transaction_store/transaction_store_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.rpc.transaction_store.get_transactions_by_id_request');
goog.provide('proto.koinos.rpc.transaction_store.get_transactions_by_id_response');
goog.provide('proto.koinos.rpc.transaction_store.transaction_store_request');
goog.provide('proto.koinos.rpc.transaction_store.transaction_store_request.RequestCase');
goog.provide('proto.koinos.rpc.transaction_store.transaction_store_response');
goog.provide('proto.koinos.rpc.transaction_store.transaction_store_response.ResponseCase');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.koinos.rpc.error_response');
goog.require('proto.koinos.rpc.reserved_rpc');
goog.require('proto.koinos.transaction_store.transaction_item');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.transaction_store.get_transactions_by_id_request.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.transaction_store.get_transactions_by_id_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.transaction_store.get_transactions_by_id_request.displayName = 'proto.koinos.rpc.transaction_store.get_transactions_by_id_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.transaction_store.get_transactions_by_id_response.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.transaction_store.get_transactions_by_id_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.transaction_store.get_transactions_by_id_response.displayName = 'proto.koinos.rpc.transaction_store.get_transactions_by_id_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.transaction_store.transaction_store_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.rpc.transaction_store.transaction_store_request.oneofGroups_);
};
goog.inherits(proto.koinos.rpc.transaction_store.transaction_store_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.transaction_store.transaction_store_request.displayName = 'proto.koinos.rpc.transaction_store.transaction_store_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.transaction_store.transaction_store_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.rpc.transaction_store.transaction_store_response.oneofGroups_);
};
goog.inherits(proto.koinos.rpc.transaction_store.transaction_store_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.transaction_store.transaction_store_response.displayName = 'proto.koinos.rpc.transaction_store.transaction_store_response';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.transaction_store.get_transactions_by_id_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIdsList: msg.getTransactionIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.transaction_store.get_transactions_by_id_request;
  return proto.koinos.rpc.transaction_store.get_transactions_by_id_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.transaction_store.get_transactions_by_id_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes transaction_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.getTransactionIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes transaction_ids = 1;
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<string>}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.getTransactionIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionIdsList()));
};


/**
 * repeated bytes transaction_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.getTransactionIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request} returns this
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.setTransactionIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request} returns this
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.addTransactionIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_request} returns this
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_request.prototype.clearTransactionIdsList = function() {
  return this.setTransactionIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.transaction_store.get_transactions_by_id_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.koinos.transaction_store.transaction_item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.transaction_store.get_transactions_by_id_response;
  return proto.koinos.rpc.transaction_store.get_transactions_by_id_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.transaction_store.transaction_item;
      reader.readMessage(value,proto.koinos.transaction_store.transaction_item.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.transaction_store.get_transactions_by_id_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.koinos.transaction_store.transaction_item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated koinos.transaction_store.transaction_item transactions = 1;
 * @return {!Array<!proto.koinos.transaction_store.transaction_item>}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.koinos.transaction_store.transaction_item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.transaction_store.transaction_item, 1));
};


/**
 * @param {!Array<!proto.koinos.transaction_store.transaction_item>} value
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response} returns this
*/
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.koinos.transaction_store.transaction_item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.transaction_store.transaction_item}
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.koinos.transaction_store.transaction_item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.transaction_store.get_transactions_by_id_response} returns this
 */
proto.koinos.rpc.transaction_store.get_transactions_by_id_response.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.rpc.transaction_store.transaction_store_request.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.RequestCase = {
  REQUEST_NOT_SET: 0,
  RESERVED: 1,
  GET_TRANSACTIONS_BY_ID: 2
};

/**
 * @return {proto.koinos.rpc.transaction_store.transaction_store_request.RequestCase}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.getRequestCase = function() {
  return /** @type {proto.koinos.rpc.transaction_store.transaction_store_request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.koinos.rpc.transaction_store.transaction_store_request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.transaction_store.transaction_store_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.transaction_store.transaction_store_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.transaction_store_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: (f = msg.getReserved()) && proto.koinos.rpc.reserved_rpc.toObject(includeInstance, f),
    getTransactionsById: (f = msg.getGetTransactionsById()) && proto.koinos.rpc.transaction_store.get_transactions_by_id_request.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_request}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.transaction_store.transaction_store_request;
  return proto.koinos.rpc.transaction_store.transaction_store_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.transaction_store.transaction_store_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_request}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.rpc.reserved_rpc;
      reader.readMessage(value,proto.koinos.rpc.reserved_rpc.deserializeBinaryFromReader);
      msg.setReserved(value);
      break;
    case 2:
      var value = new proto.koinos.rpc.transaction_store.get_transactions_by_id_request;
      reader.readMessage(value,proto.koinos.rpc.transaction_store.get_transactions_by_id_request.deserializeBinaryFromReader);
      msg.setGetTransactionsById(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.transaction_store.transaction_store_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.transaction_store.transaction_store_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.transaction_store_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.rpc.reserved_rpc.serializeBinaryToWriter
    );
  }
  f = message.getGetTransactionsById();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.rpc.transaction_store.get_transactions_by_id_request.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.rpc.reserved_rpc reserved = 1;
 * @return {?proto.koinos.rpc.reserved_rpc}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.getReserved = function() {
  return /** @type{?proto.koinos.rpc.reserved_rpc} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.reserved_rpc, 1));
};


/**
 * @param {?proto.koinos.rpc.reserved_rpc|undefined} value
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_request} returns this
*/
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.setReserved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.rpc.transaction_store.transaction_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_request} returns this
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.clearReserved = function() {
  return this.setReserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional get_transactions_by_id_request get_transactions_by_id = 2;
 * @return {?proto.koinos.rpc.transaction_store.get_transactions_by_id_request}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.getGetTransactionsById = function() {
  return /** @type{?proto.koinos.rpc.transaction_store.get_transactions_by_id_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.transaction_store.get_transactions_by_id_request, 2));
};


/**
 * @param {?proto.koinos.rpc.transaction_store.get_transactions_by_id_request|undefined} value
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_request} returns this
*/
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.setGetTransactionsById = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.rpc.transaction_store.transaction_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_request} returns this
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.clearGetTransactionsById = function() {
  return this.setGetTransactionsById(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.transaction_store.transaction_store_request.prototype.hasGetTransactionsById = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.rpc.transaction_store.transaction_store_response.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  RESERVED: 1,
  ERROR: 2,
  GET_TRANSACTIONS_BY_ID: 3
};

/**
 * @return {proto.koinos.rpc.transaction_store.transaction_store_response.ResponseCase}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.getResponseCase = function() {
  return /** @type {proto.koinos.rpc.transaction_store.transaction_store_response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.koinos.rpc.transaction_store.transaction_store_response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.transaction_store.transaction_store_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.transaction_store.transaction_store_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.transaction_store_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: (f = msg.getReserved()) && proto.koinos.rpc.reserved_rpc.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.koinos.rpc.error_response.toObject(includeInstance, f),
    getTransactionsById: (f = msg.getGetTransactionsById()) && proto.koinos.rpc.transaction_store.get_transactions_by_id_response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.transaction_store.transaction_store_response;
  return proto.koinos.rpc.transaction_store.transaction_store_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.transaction_store.transaction_store_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.rpc.reserved_rpc;
      reader.readMessage(value,proto.koinos.rpc.reserved_rpc.deserializeBinaryFromReader);
      msg.setReserved(value);
      break;
    case 2:
      var value = new proto.koinos.rpc.error_response;
      reader.readMessage(value,proto.koinos.rpc.error_response.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.koinos.rpc.transaction_store.get_transactions_by_id_response;
      reader.readMessage(value,proto.koinos.rpc.transaction_store.get_transactions_by_id_response.deserializeBinaryFromReader);
      msg.setGetTransactionsById(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.transaction_store.transaction_store_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.transaction_store.transaction_store_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.transaction_store.transaction_store_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.rpc.reserved_rpc.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.rpc.error_response.serializeBinaryToWriter
    );
  }
  f = message.getGetTransactionsById();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.rpc.transaction_store.get_transactions_by_id_response.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.rpc.reserved_rpc reserved = 1;
 * @return {?proto.koinos.rpc.reserved_rpc}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.getReserved = function() {
  return /** @type{?proto.koinos.rpc.reserved_rpc} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.reserved_rpc, 1));
};


/**
 * @param {?proto.koinos.rpc.reserved_rpc|undefined} value
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response} returns this
*/
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.setReserved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.rpc.transaction_store.transaction_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response} returns this
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.clearReserved = function() {
  return this.setReserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional koinos.rpc.error_response error = 2;
 * @return {?proto.koinos.rpc.error_response}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.getError = function() {
  return /** @type{?proto.koinos.rpc.error_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.error_response, 2));
};


/**
 * @param {?proto.koinos.rpc.error_response|undefined} value
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response} returns this
*/
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.rpc.transaction_store.transaction_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response} returns this
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional get_transactions_by_id_response get_transactions_by_id = 3;
 * @return {?proto.koinos.rpc.transaction_store.get_transactions_by_id_response}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.getGetTransactionsById = function() {
  return /** @type{?proto.koinos.rpc.transaction_store.get_transactions_by_id_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.transaction_store.get_transactions_by_id_response, 3));
};


/**
 * @param {?proto.koinos.rpc.transaction_store.get_transactions_by_id_response|undefined} value
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response} returns this
*/
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.setGetTransactionsById = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.rpc.transaction_store.transaction_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.transaction_store.transaction_store_response} returns this
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.clearGetTransactionsById = function() {
  return this.setGetTransactionsById(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.transaction_store.transaction_store_response.prototype.hasGetTransactionsById = function() {
  return jspb.Message.getField(this, 3) != null;
};


