// source: koinos/rpc/block_store/block_store_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.rpc.block_store.add_block_request');
goog.provide('proto.koinos.rpc.block_store.add_block_response');
goog.provide('proto.koinos.rpc.block_store.block_store_request');
goog.provide('proto.koinos.rpc.block_store.block_store_request.RequestCase');
goog.provide('proto.koinos.rpc.block_store.block_store_response');
goog.provide('proto.koinos.rpc.block_store.block_store_response.ResponseCase');
goog.provide('proto.koinos.rpc.block_store.get_blocks_by_height_request');
goog.provide('proto.koinos.rpc.block_store.get_blocks_by_height_response');
goog.provide('proto.koinos.rpc.block_store.get_blocks_by_id_request');
goog.provide('proto.koinos.rpc.block_store.get_blocks_by_id_response');
goog.provide('proto.koinos.rpc.block_store.get_highest_block_request');
goog.provide('proto.koinos.rpc.block_store.get_highest_block_response');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.koinos.block_store.block_item');
goog.require('proto.koinos.block_topology');
goog.require('proto.koinos.protocol.block');
goog.require('proto.koinos.rpc.error_response');
goog.require('proto.koinos.rpc.reserved_rpc');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.block_store.get_blocks_by_id_request.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.block_store.get_blocks_by_id_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.get_blocks_by_id_request.displayName = 'proto.koinos.rpc.block_store.get_blocks_by_id_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.block_store.get_blocks_by_id_response.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.block_store.get_blocks_by_id_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.get_blocks_by_id_response.displayName = 'proto.koinos.rpc.block_store.get_blocks_by_id_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.block_store.get_blocks_by_height_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.get_blocks_by_height_request.displayName = 'proto.koinos.rpc.block_store.get_blocks_by_height_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.rpc.block_store.get_blocks_by_height_response.repeatedFields_, null);
};
goog.inherits(proto.koinos.rpc.block_store.get_blocks_by_height_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.get_blocks_by_height_response.displayName = 'proto.koinos.rpc.block_store.get_blocks_by_height_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.add_block_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.block_store.add_block_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.add_block_request.displayName = 'proto.koinos.rpc.block_store.add_block_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.add_block_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.block_store.add_block_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.add_block_response.displayName = 'proto.koinos.rpc.block_store.add_block_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.get_highest_block_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.block_store.get_highest_block_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.get_highest_block_request.displayName = 'proto.koinos.rpc.block_store.get_highest_block_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.get_highest_block_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.rpc.block_store.get_highest_block_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.get_highest_block_response.displayName = 'proto.koinos.rpc.block_store.get_highest_block_response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.block_store_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.rpc.block_store.block_store_request.oneofGroups_);
};
goog.inherits(proto.koinos.rpc.block_store.block_store_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.block_store_request.displayName = 'proto.koinos.rpc.block_store.block_store_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.rpc.block_store.block_store_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.rpc.block_store.block_store_response.oneofGroups_);
};
goog.inherits(proto.koinos.rpc.block_store.block_store_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.rpc.block_store.block_store_response.displayName = 'proto.koinos.rpc.block_store.block_store_response';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.get_blocks_by_id_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_id_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockIdList: msg.getBlockIdList_asB64(),
    returnBlock: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    returnReceipt: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.get_blocks_by_id_request;
  return proto.koinos.rpc.block_store.get_blocks_by_id_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_id_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addBlockId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnBlock(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.get_blocks_by_id_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_id_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockIdList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getReturnBlock();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReturnReceipt();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated bytes block_id = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.getBlockIdList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockIdList()`
 * @return {!Array<string>}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.getBlockIdList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getBlockIdList()));
};


/**
 * repeated bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockIdList()`
 * @return {!Array<!Uint8Array>}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.getBlockIdList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getBlockIdList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.setBlockIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.addBlockId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.clearBlockIdList = function() {
  return this.setBlockIdList([]);
};


/**
 * optional bool return_block = 2;
 * @return {boolean}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.getReturnBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.setReturnBlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool return_receipt = 3;
 * @return {boolean}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.getReturnReceipt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_id_request.prototype.setReturnReceipt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.get_blocks_by_id_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_id_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockItemsList: jspb.Message.toObjectList(msg.getBlockItemsList(),
    proto.koinos.block_store.block_item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_response}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.get_blocks_by_id_response;
  return proto.koinos.rpc.block_store.get_blocks_by_id_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_id_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_response}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.block_store.block_item;
      reader.readMessage(value,proto.koinos.block_store.block_item.deserializeBinaryFromReader);
      msg.addBlockItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.get_blocks_by_id_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_id_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.koinos.block_store.block_item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated koinos.block_store.block_item block_items = 1;
 * @return {!Array<!proto.koinos.block_store.block_item>}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.prototype.getBlockItemsList = function() {
  return /** @type{!Array<!proto.koinos.block_store.block_item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.block_store.block_item, 1));
};


/**
 * @param {!Array<!proto.koinos.block_store.block_item>} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_response} returns this
*/
proto.koinos.rpc.block_store.get_blocks_by_id_response.prototype.setBlockItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.koinos.block_store.block_item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.block_store.block_item}
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.prototype.addBlockItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.koinos.block_store.block_item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_id_response} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_id_response.prototype.clearBlockItemsList = function() {
  return this.setBlockItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.get_blocks_by_height_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_height_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    headBlockId: msg.getHeadBlockId_asB64(),
    ancestorStartHeight: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    numBlocks: jspb.Message.getFieldWithDefault(msg, 3, 0),
    returnBlock: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    returnReceipt: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.get_blocks_by_height_request;
  return proto.koinos.rpc.block_store.get_blocks_by_height_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_height_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadBlockId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAncestorStartHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumBlocks(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnBlock(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.get_blocks_by_height_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_height_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAncestorStartHeight();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getNumBlocks();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getReturnBlock();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getReturnReceipt();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes head_block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getHeadBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes head_block_id = 1;
 * This is a type-conversion wrapper around `getHeadBlockId()`
 * @return {string}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getHeadBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadBlockId()));
};


/**
 * optional bytes head_block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadBlockId()`
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getHeadBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadBlockId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.setHeadBlockId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 ancestor_start_height = 2;
 * @return {string}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getAncestorStartHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.setAncestorStartHeight = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint32 num_blocks = 3;
 * @return {number}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getNumBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.setNumBlocks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool return_block = 4;
 * @return {boolean}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getReturnBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.setReturnBlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool return_receipt = 5;
 * @return {boolean}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.getReturnReceipt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_request} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_height_request.prototype.setReturnReceipt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.get_blocks_by_height_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_height_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockItemsList: jspb.Message.toObjectList(msg.getBlockItemsList(),
    proto.koinos.block_store.block_item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_response}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.get_blocks_by_height_response;
  return proto.koinos.rpc.block_store.get_blocks_by_height_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_height_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_response}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.block_store.block_item;
      reader.readMessage(value,proto.koinos.block_store.block_item.deserializeBinaryFromReader);
      msg.addBlockItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.get_blocks_by_height_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.get_blocks_by_height_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.koinos.block_store.block_item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated koinos.block_store.block_item block_items = 1;
 * @return {!Array<!proto.koinos.block_store.block_item>}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.prototype.getBlockItemsList = function() {
  return /** @type{!Array<!proto.koinos.block_store.block_item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.block_store.block_item, 1));
};


/**
 * @param {!Array<!proto.koinos.block_store.block_item>} value
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_response} returns this
*/
proto.koinos.rpc.block_store.get_blocks_by_height_response.prototype.setBlockItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.koinos.block_store.block_item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.block_store.block_item}
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.prototype.addBlockItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.koinos.block_store.block_item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.rpc.block_store.get_blocks_by_height_response} returns this
 */
proto.koinos.rpc.block_store.get_blocks_by_height_response.prototype.clearBlockItemsList = function() {
  return this.setBlockItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.add_block_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.add_block_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.add_block_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.add_block_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockToAdd: (f = msg.getBlockToAdd()) && proto.koinos.protocol.block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.add_block_request}
 */
proto.koinos.rpc.block_store.add_block_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.add_block_request;
  return proto.koinos.rpc.block_store.add_block_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.add_block_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.add_block_request}
 */
proto.koinos.rpc.block_store.add_block_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.block;
      reader.readMessage(value,proto.koinos.protocol.block.deserializeBinaryFromReader);
      msg.setBlockToAdd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.add_block_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.add_block_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.add_block_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.add_block_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockToAdd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.block.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.protocol.block block_to_add = 1;
 * @return {?proto.koinos.protocol.block}
 */
proto.koinos.rpc.block_store.add_block_request.prototype.getBlockToAdd = function() {
  return /** @type{?proto.koinos.protocol.block} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block, 1));
};


/**
 * @param {?proto.koinos.protocol.block|undefined} value
 * @return {!proto.koinos.rpc.block_store.add_block_request} returns this
*/
proto.koinos.rpc.block_store.add_block_request.prototype.setBlockToAdd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.add_block_request} returns this
 */
proto.koinos.rpc.block_store.add_block_request.prototype.clearBlockToAdd = function() {
  return this.setBlockToAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.add_block_request.prototype.hasBlockToAdd = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.add_block_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.add_block_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.add_block_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.add_block_response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.add_block_response}
 */
proto.koinos.rpc.block_store.add_block_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.add_block_response;
  return proto.koinos.rpc.block_store.add_block_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.add_block_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.add_block_response}
 */
proto.koinos.rpc.block_store.add_block_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.add_block_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.add_block_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.add_block_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.add_block_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.get_highest_block_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.get_highest_block_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.get_highest_block_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_highest_block_request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.get_highest_block_request}
 */
proto.koinos.rpc.block_store.get_highest_block_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.get_highest_block_request;
  return proto.koinos.rpc.block_store.get_highest_block_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.get_highest_block_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.get_highest_block_request}
 */
proto.koinos.rpc.block_store.get_highest_block_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_highest_block_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.get_highest_block_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.get_highest_block_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_highest_block_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.get_highest_block_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.get_highest_block_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.get_highest_block_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_highest_block_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    topology: (f = msg.getTopology()) && proto.koinos.block_topology.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.get_highest_block_response}
 */
proto.koinos.rpc.block_store.get_highest_block_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.get_highest_block_response;
  return proto.koinos.rpc.block_store.get_highest_block_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.get_highest_block_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.get_highest_block_response}
 */
proto.koinos.rpc.block_store.get_highest_block_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.block_topology;
      reader.readMessage(value,proto.koinos.block_topology.deserializeBinaryFromReader);
      msg.setTopology(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.get_highest_block_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.get_highest_block_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.get_highest_block_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.get_highest_block_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopology();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.block_topology.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.block_topology topology = 1;
 * @return {?proto.koinos.block_topology}
 */
proto.koinos.rpc.block_store.get_highest_block_response.prototype.getTopology = function() {
  return /** @type{?proto.koinos.block_topology} */ (
    jspb.Message.getWrapperField(this, proto.koinos.block_topology, 1));
};


/**
 * @param {?proto.koinos.block_topology|undefined} value
 * @return {!proto.koinos.rpc.block_store.get_highest_block_response} returns this
*/
proto.koinos.rpc.block_store.get_highest_block_response.prototype.setTopology = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.get_highest_block_response} returns this
 */
proto.koinos.rpc.block_store.get_highest_block_response.prototype.clearTopology = function() {
  return this.setTopology(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.get_highest_block_response.prototype.hasTopology = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.rpc.block_store.block_store_request.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.koinos.rpc.block_store.block_store_request.RequestCase = {
  REQUEST_NOT_SET: 0,
  RESERVED: 1,
  GET_BLOCKS_BY_ID: 2,
  GET_BLOCKS_BY_HEIGHT: 3,
  ADD_BLOCK: 4,
  GET_HIGHEST_BLOCK: 5
};

/**
 * @return {proto.koinos.rpc.block_store.block_store_request.RequestCase}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.getRequestCase = function() {
  return /** @type {proto.koinos.rpc.block_store.block_store_request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.koinos.rpc.block_store.block_store_request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.block_store_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.block_store_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.block_store_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: (f = msg.getReserved()) && proto.koinos.rpc.reserved_rpc.toObject(includeInstance, f),
    getBlocksById: (f = msg.getGetBlocksById()) && proto.koinos.rpc.block_store.get_blocks_by_id_request.toObject(includeInstance, f),
    getBlocksByHeight: (f = msg.getGetBlocksByHeight()) && proto.koinos.rpc.block_store.get_blocks_by_height_request.toObject(includeInstance, f),
    addBlock: (f = msg.getAddBlock()) && proto.koinos.rpc.block_store.add_block_request.toObject(includeInstance, f),
    getHighestBlock: (f = msg.getGetHighestBlock()) && proto.koinos.rpc.block_store.get_highest_block_request.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.block_store_request}
 */
proto.koinos.rpc.block_store.block_store_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.block_store_request;
  return proto.koinos.rpc.block_store.block_store_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.block_store_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.block_store_request}
 */
proto.koinos.rpc.block_store.block_store_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.rpc.reserved_rpc;
      reader.readMessage(value,proto.koinos.rpc.reserved_rpc.deserializeBinaryFromReader);
      msg.setReserved(value);
      break;
    case 2:
      var value = new proto.koinos.rpc.block_store.get_blocks_by_id_request;
      reader.readMessage(value,proto.koinos.rpc.block_store.get_blocks_by_id_request.deserializeBinaryFromReader);
      msg.setGetBlocksById(value);
      break;
    case 3:
      var value = new proto.koinos.rpc.block_store.get_blocks_by_height_request;
      reader.readMessage(value,proto.koinos.rpc.block_store.get_blocks_by_height_request.deserializeBinaryFromReader);
      msg.setGetBlocksByHeight(value);
      break;
    case 4:
      var value = new proto.koinos.rpc.block_store.add_block_request;
      reader.readMessage(value,proto.koinos.rpc.block_store.add_block_request.deserializeBinaryFromReader);
      msg.setAddBlock(value);
      break;
    case 5:
      var value = new proto.koinos.rpc.block_store.get_highest_block_request;
      reader.readMessage(value,proto.koinos.rpc.block_store.get_highest_block_request.deserializeBinaryFromReader);
      msg.setGetHighestBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.block_store_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.block_store_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.block_store_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.rpc.reserved_rpc.serializeBinaryToWriter
    );
  }
  f = message.getGetBlocksById();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.rpc.block_store.get_blocks_by_id_request.serializeBinaryToWriter
    );
  }
  f = message.getGetBlocksByHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.rpc.block_store.get_blocks_by_height_request.serializeBinaryToWriter
    );
  }
  f = message.getAddBlock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.koinos.rpc.block_store.add_block_request.serializeBinaryToWriter
    );
  }
  f = message.getGetHighestBlock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.koinos.rpc.block_store.get_highest_block_request.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.rpc.reserved_rpc reserved = 1;
 * @return {?proto.koinos.rpc.reserved_rpc}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.getReserved = function() {
  return /** @type{?proto.koinos.rpc.reserved_rpc} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.reserved_rpc, 1));
};


/**
 * @param {?proto.koinos.rpc.reserved_rpc|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
*/
proto.koinos.rpc.block_store.block_store_request.prototype.setReserved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.rpc.block_store.block_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
 */
proto.koinos.rpc.block_store.block_store_request.prototype.clearReserved = function() {
  return this.setReserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional get_blocks_by_id_request get_blocks_by_id = 2;
 * @return {?proto.koinos.rpc.block_store.get_blocks_by_id_request}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.getGetBlocksById = function() {
  return /** @type{?proto.koinos.rpc.block_store.get_blocks_by_id_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.get_blocks_by_id_request, 2));
};


/**
 * @param {?proto.koinos.rpc.block_store.get_blocks_by_id_request|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
*/
proto.koinos.rpc.block_store.block_store_request.prototype.setGetBlocksById = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.rpc.block_store.block_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
 */
proto.koinos.rpc.block_store.block_store_request.prototype.clearGetBlocksById = function() {
  return this.setGetBlocksById(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.hasGetBlocksById = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional get_blocks_by_height_request get_blocks_by_height = 3;
 * @return {?proto.koinos.rpc.block_store.get_blocks_by_height_request}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.getGetBlocksByHeight = function() {
  return /** @type{?proto.koinos.rpc.block_store.get_blocks_by_height_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.get_blocks_by_height_request, 3));
};


/**
 * @param {?proto.koinos.rpc.block_store.get_blocks_by_height_request|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
*/
proto.koinos.rpc.block_store.block_store_request.prototype.setGetBlocksByHeight = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.rpc.block_store.block_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
 */
proto.koinos.rpc.block_store.block_store_request.prototype.clearGetBlocksByHeight = function() {
  return this.setGetBlocksByHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.hasGetBlocksByHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional add_block_request add_block = 4;
 * @return {?proto.koinos.rpc.block_store.add_block_request}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.getAddBlock = function() {
  return /** @type{?proto.koinos.rpc.block_store.add_block_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.add_block_request, 4));
};


/**
 * @param {?proto.koinos.rpc.block_store.add_block_request|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
*/
proto.koinos.rpc.block_store.block_store_request.prototype.setAddBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.koinos.rpc.block_store.block_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
 */
proto.koinos.rpc.block_store.block_store_request.prototype.clearAddBlock = function() {
  return this.setAddBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.hasAddBlock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional get_highest_block_request get_highest_block = 5;
 * @return {?proto.koinos.rpc.block_store.get_highest_block_request}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.getGetHighestBlock = function() {
  return /** @type{?proto.koinos.rpc.block_store.get_highest_block_request} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.get_highest_block_request, 5));
};


/**
 * @param {?proto.koinos.rpc.block_store.get_highest_block_request|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
*/
proto.koinos.rpc.block_store.block_store_request.prototype.setGetHighestBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.koinos.rpc.block_store.block_store_request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_request} returns this
 */
proto.koinos.rpc.block_store.block_store_request.prototype.clearGetHighestBlock = function() {
  return this.setGetHighestBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_request.prototype.hasGetHighestBlock = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.rpc.block_store.block_store_response.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.koinos.rpc.block_store.block_store_response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  RESERVED: 1,
  ERROR: 2,
  GET_BLOCKS_BY_ID: 3,
  GET_BLOCKS_BY_HEIGHT: 4,
  ADD_BLOCK: 5,
  GET_HIGHEST_BLOCK: 6
};

/**
 * @return {proto.koinos.rpc.block_store.block_store_response.ResponseCase}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getResponseCase = function() {
  return /** @type {proto.koinos.rpc.block_store.block_store_response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.rpc.block_store.block_store_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.rpc.block_store.block_store_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.block_store_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: (f = msg.getReserved()) && proto.koinos.rpc.reserved_rpc.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.koinos.rpc.error_response.toObject(includeInstance, f),
    getBlocksById: (f = msg.getGetBlocksById()) && proto.koinos.rpc.block_store.get_blocks_by_id_response.toObject(includeInstance, f),
    getBlocksByHeight: (f = msg.getGetBlocksByHeight()) && proto.koinos.rpc.block_store.get_blocks_by_height_response.toObject(includeInstance, f),
    addBlock: (f = msg.getAddBlock()) && proto.koinos.rpc.block_store.add_block_response.toObject(includeInstance, f),
    getHighestBlock: (f = msg.getGetHighestBlock()) && proto.koinos.rpc.block_store.get_highest_block_response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.rpc.block_store.block_store_response}
 */
proto.koinos.rpc.block_store.block_store_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.rpc.block_store.block_store_response;
  return proto.koinos.rpc.block_store.block_store_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.rpc.block_store.block_store_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.rpc.block_store.block_store_response}
 */
proto.koinos.rpc.block_store.block_store_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.rpc.reserved_rpc;
      reader.readMessage(value,proto.koinos.rpc.reserved_rpc.deserializeBinaryFromReader);
      msg.setReserved(value);
      break;
    case 2:
      var value = new proto.koinos.rpc.error_response;
      reader.readMessage(value,proto.koinos.rpc.error_response.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.koinos.rpc.block_store.get_blocks_by_id_response;
      reader.readMessage(value,proto.koinos.rpc.block_store.get_blocks_by_id_response.deserializeBinaryFromReader);
      msg.setGetBlocksById(value);
      break;
    case 4:
      var value = new proto.koinos.rpc.block_store.get_blocks_by_height_response;
      reader.readMessage(value,proto.koinos.rpc.block_store.get_blocks_by_height_response.deserializeBinaryFromReader);
      msg.setGetBlocksByHeight(value);
      break;
    case 5:
      var value = new proto.koinos.rpc.block_store.add_block_response;
      reader.readMessage(value,proto.koinos.rpc.block_store.add_block_response.deserializeBinaryFromReader);
      msg.setAddBlock(value);
      break;
    case 6:
      var value = new proto.koinos.rpc.block_store.get_highest_block_response;
      reader.readMessage(value,proto.koinos.rpc.block_store.get_highest_block_response.deserializeBinaryFromReader);
      msg.setGetHighestBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.rpc.block_store.block_store_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.rpc.block_store.block_store_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.rpc.block_store.block_store_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.rpc.reserved_rpc.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.rpc.error_response.serializeBinaryToWriter
    );
  }
  f = message.getGetBlocksById();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.rpc.block_store.get_blocks_by_id_response.serializeBinaryToWriter
    );
  }
  f = message.getGetBlocksByHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.koinos.rpc.block_store.get_blocks_by_height_response.serializeBinaryToWriter
    );
  }
  f = message.getAddBlock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.koinos.rpc.block_store.add_block_response.serializeBinaryToWriter
    );
  }
  f = message.getGetHighestBlock();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.koinos.rpc.block_store.get_highest_block_response.serializeBinaryToWriter
    );
  }
};


/**
 * optional koinos.rpc.reserved_rpc reserved = 1;
 * @return {?proto.koinos.rpc.reserved_rpc}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getReserved = function() {
  return /** @type{?proto.koinos.rpc.reserved_rpc} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.reserved_rpc, 1));
};


/**
 * @param {?proto.koinos.rpc.reserved_rpc|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
*/
proto.koinos.rpc.block_store.block_store_response.prototype.setReserved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
 */
proto.koinos.rpc.block_store.block_store_response.prototype.clearReserved = function() {
  return this.setReserved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional koinos.rpc.error_response error = 2;
 * @return {?proto.koinos.rpc.error_response}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getError = function() {
  return /** @type{?proto.koinos.rpc.error_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.error_response, 2));
};


/**
 * @param {?proto.koinos.rpc.error_response|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
*/
proto.koinos.rpc.block_store.block_store_response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
 */
proto.koinos.rpc.block_store.block_store_response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional get_blocks_by_id_response get_blocks_by_id = 3;
 * @return {?proto.koinos.rpc.block_store.get_blocks_by_id_response}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getGetBlocksById = function() {
  return /** @type{?proto.koinos.rpc.block_store.get_blocks_by_id_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.get_blocks_by_id_response, 3));
};


/**
 * @param {?proto.koinos.rpc.block_store.get_blocks_by_id_response|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
*/
proto.koinos.rpc.block_store.block_store_response.prototype.setGetBlocksById = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
 */
proto.koinos.rpc.block_store.block_store_response.prototype.clearGetBlocksById = function() {
  return this.setGetBlocksById(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.hasGetBlocksById = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional get_blocks_by_height_response get_blocks_by_height = 4;
 * @return {?proto.koinos.rpc.block_store.get_blocks_by_height_response}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getGetBlocksByHeight = function() {
  return /** @type{?proto.koinos.rpc.block_store.get_blocks_by_height_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.get_blocks_by_height_response, 4));
};


/**
 * @param {?proto.koinos.rpc.block_store.get_blocks_by_height_response|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
*/
proto.koinos.rpc.block_store.block_store_response.prototype.setGetBlocksByHeight = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
 */
proto.koinos.rpc.block_store.block_store_response.prototype.clearGetBlocksByHeight = function() {
  return this.setGetBlocksByHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.hasGetBlocksByHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional add_block_response add_block = 5;
 * @return {?proto.koinos.rpc.block_store.add_block_response}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getAddBlock = function() {
  return /** @type{?proto.koinos.rpc.block_store.add_block_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.add_block_response, 5));
};


/**
 * @param {?proto.koinos.rpc.block_store.add_block_response|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
*/
proto.koinos.rpc.block_store.block_store_response.prototype.setAddBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
 */
proto.koinos.rpc.block_store.block_store_response.prototype.clearAddBlock = function() {
  return this.setAddBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.hasAddBlock = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional get_highest_block_response get_highest_block = 6;
 * @return {?proto.koinos.rpc.block_store.get_highest_block_response}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.getGetHighestBlock = function() {
  return /** @type{?proto.koinos.rpc.block_store.get_highest_block_response} */ (
    jspb.Message.getWrapperField(this, proto.koinos.rpc.block_store.get_highest_block_response, 6));
};


/**
 * @param {?proto.koinos.rpc.block_store.get_highest_block_response|undefined} value
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
*/
proto.koinos.rpc.block_store.block_store_response.prototype.setGetHighestBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.koinos.rpc.block_store.block_store_response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.rpc.block_store.block_store_response} returns this
 */
proto.koinos.rpc.block_store.block_store_response.prototype.clearGetHighestBlock = function() {
  return this.setGetHighestBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.rpc.block_store.block_store_response.prototype.hasGetHighestBlock = function() {
  return jspb.Message.getField(this, 6) != null;
};


