// source: koinos/protocol/protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.protocol.block');
goog.provide('proto.koinos.protocol.block_header');
goog.provide('proto.koinos.protocol.block_receipt');
goog.provide('proto.koinos.protocol.call_contract_operation');
goog.provide('proto.koinos.protocol.contract_call_bundle');
goog.provide('proto.koinos.protocol.event_data');
goog.provide('proto.koinos.protocol.operation');
goog.provide('proto.koinos.protocol.operation.OpCase');
goog.provide('proto.koinos.protocol.set_system_call_operation');
goog.provide('proto.koinos.protocol.set_system_contract_operation');
goog.provide('proto.koinos.protocol.system_call_target');
goog.provide('proto.koinos.protocol.system_call_target.TargetCase');
goog.provide('proto.koinos.protocol.transaction');
goog.provide('proto.koinos.protocol.transaction_header');
goog.provide('proto.koinos.protocol.transaction_receipt');
goog.provide('proto.koinos.protocol.upload_contract_operation');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.event_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.event_data.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.event_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.event_data.displayName = 'proto.koinos.protocol.event_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.contract_call_bundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.contract_call_bundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.contract_call_bundle.displayName = 'proto.koinos.protocol.contract_call_bundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.system_call_target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.system_call_target.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.system_call_target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.system_call_target.displayName = 'proto.koinos.protocol.system_call_target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.upload_contract_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.upload_contract_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.upload_contract_operation.displayName = 'proto.koinos.protocol.upload_contract_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.call_contract_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.call_contract_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.call_contract_operation.displayName = 'proto.koinos.protocol.call_contract_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.set_system_call_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.set_system_call_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.set_system_call_operation.displayName = 'proto.koinos.protocol.set_system_call_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.set_system_contract_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.set_system_contract_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.set_system_contract_operation.displayName = 'proto.koinos.protocol.set_system_contract_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.operation.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.operation.displayName = 'proto.koinos.protocol.operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.transaction_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.transaction_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.transaction_header.displayName = 'proto.koinos.protocol.transaction_header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.transaction.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.transaction.displayName = 'proto.koinos.protocol.transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.transaction_receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.transaction_receipt.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.transaction_receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.transaction_receipt.displayName = 'proto.koinos.protocol.transaction_receipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.block_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block_header.displayName = 'proto.koinos.protocol.block_header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.block.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block.displayName = 'proto.koinos.protocol.block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block_receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.block_receipt.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.block_receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block_receipt.displayName = 'proto.koinos.protocol.block_receipt';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.event_data.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.event_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.event_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.event_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.event_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    source: msg.getSource_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data: msg.getData_asB64(),
    impactedList: msg.getImpactedList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.event_data}
 */
proto.koinos.protocol.event_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.event_data;
  return proto.koinos.protocol.event_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.event_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.event_data}
 */
proto.koinos.protocol.event_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addImpacted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.event_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.event_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.event_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.event_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSource_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getImpactedList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional uint32 sequence = 1;
 * @return {number}
 */
proto.koinos.protocol.event_data.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes source = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.event_data.prototype.getSource = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes source = 2;
 * This is a type-conversion wrapper around `getSource()`
 * @return {string}
 */
proto.koinos.protocol.event_data.prototype.getSource_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSource()));
};


/**
 * optional bytes source = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSource()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.event_data.prototype.getSource_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSource()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.setSource = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.koinos.protocol.event_data.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.event_data.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.koinos.protocol.event_data.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.event_data.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes impacted = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.koinos.protocol.event_data.prototype.getImpactedList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes impacted = 5;
 * This is a type-conversion wrapper around `getImpactedList()`
 * @return {!Array<string>}
 */
proto.koinos.protocol.event_data.prototype.getImpactedList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getImpactedList()));
};


/**
 * repeated bytes impacted = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImpactedList()`
 * @return {!Array<!Uint8Array>}
 */
proto.koinos.protocol.event_data.prototype.getImpactedList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getImpactedList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.setImpactedList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.addImpacted = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.event_data} returns this
 */
proto.koinos.protocol.event_data.prototype.clearImpactedList = function() {
  return this.setImpactedList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.contract_call_bundle.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.contract_call_bundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.contract_call_bundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.contract_call_bundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    entryPoint: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.contract_call_bundle}
 */
proto.koinos.protocol.contract_call_bundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.contract_call_bundle;
  return proto.koinos.protocol.contract_call_bundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.contract_call_bundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.contract_call_bundle}
 */
proto.koinos.protocol.contract_call_bundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.contract_call_bundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.contract_call_bundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.contract_call_bundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.contract_call_bundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntryPoint();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.contract_call_bundle} returns this
 */
proto.koinos.protocol.contract_call_bundle.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 entry_point = 2;
 * @return {number}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getEntryPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.contract_call_bundle} returns this
 */
proto.koinos.protocol.contract_call_bundle.prototype.setEntryPoint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.system_call_target.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.protocol.system_call_target.TargetCase = {
  TARGET_NOT_SET: 0,
  THUNK_ID: 1,
  SYSTEM_CALL_BUNDLE: 2
};

/**
 * @return {proto.koinos.protocol.system_call_target.TargetCase}
 */
proto.koinos.protocol.system_call_target.prototype.getTargetCase = function() {
  return /** @type {proto.koinos.protocol.system_call_target.TargetCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.system_call_target.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.system_call_target.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.system_call_target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.system_call_target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.system_call_target.toObject = function(includeInstance, msg) {
  var f, obj = {
    thunkId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemCallBundle: (f = msg.getSystemCallBundle()) && proto.koinos.protocol.contract_call_bundle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.system_call_target}
 */
proto.koinos.protocol.system_call_target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.system_call_target;
  return proto.koinos.protocol.system_call_target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.system_call_target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.system_call_target}
 */
proto.koinos.protocol.system_call_target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThunkId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.contract_call_bundle;
      reader.readMessage(value,proto.koinos.protocol.contract_call_bundle.deserializeBinaryFromReader);
      msg.setSystemCallBundle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.system_call_target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.system_call_target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.system_call_target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.system_call_target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSystemCallBundle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.contract_call_bundle.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 thunk_id = 1;
 * @return {number}
 */
proto.koinos.protocol.system_call_target.prototype.getThunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.system_call_target} returns this
 */
proto.koinos.protocol.system_call_target.prototype.setThunkId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.koinos.protocol.system_call_target.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.koinos.protocol.system_call_target} returns this
 */
proto.koinos.protocol.system_call_target.prototype.clearThunkId = function() {
  return jspb.Message.setOneofField(this, 1, proto.koinos.protocol.system_call_target.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.system_call_target.prototype.hasThunkId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional contract_call_bundle system_call_bundle = 2;
 * @return {?proto.koinos.protocol.contract_call_bundle}
 */
proto.koinos.protocol.system_call_target.prototype.getSystemCallBundle = function() {
  return /** @type{?proto.koinos.protocol.contract_call_bundle} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.contract_call_bundle, 2));
};


/**
 * @param {?proto.koinos.protocol.contract_call_bundle|undefined} value
 * @return {!proto.koinos.protocol.system_call_target} returns this
*/
proto.koinos.protocol.system_call_target.prototype.setSystemCallBundle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.protocol.system_call_target.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.system_call_target} returns this
 */
proto.koinos.protocol.system_call_target.prototype.clearSystemCallBundle = function() {
  return this.setSystemCallBundle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.system_call_target.prototype.hasSystemCallBundle = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.upload_contract_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.upload_contract_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.upload_contract_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.upload_contract_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    bytecode: msg.getBytecode_asB64(),
    abi: jspb.Message.getFieldWithDefault(msg, 3, ""),
    authorizesCallContract: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    authorizesUseRc: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    authorizesUploadContract: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.upload_contract_operation}
 */
proto.koinos.protocol.upload_contract_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.upload_contract_operation;
  return proto.koinos.protocol.upload_contract_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.upload_contract_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.upload_contract_operation}
 */
proto.koinos.protocol.upload_contract_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytecode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbi(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizesCallContract(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizesUseRc(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizesUploadContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.upload_contract_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.upload_contract_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.upload_contract_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.upload_contract_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBytecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAbi();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthorizesCallContract();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAuthorizesUseRc();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAuthorizesUploadContract();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes bytecode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getBytecode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bytecode = 2;
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {string}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getBytecode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytecode()));
};


/**
 * optional bytes bytecode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getBytecode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytecode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string abi = 3;
 * @return {string}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getAbi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setAbi = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool authorizes_call_contract = 4;
 * @return {boolean}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getAuthorizesCallContract = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setAuthorizesCallContract = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool authorizes_use_rc = 5;
 * @return {boolean}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getAuthorizesUseRc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setAuthorizesUseRc = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool authorizes_upload_contract = 6;
 * @return {boolean}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getAuthorizesUploadContract = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setAuthorizesUploadContract = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.call_contract_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.call_contract_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.call_contract_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.call_contract_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    entryPoint: jspb.Message.getFieldWithDefault(msg, 2, 0),
    args: msg.getArgs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.call_contract_operation}
 */
proto.koinos.protocol.call_contract_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.call_contract_operation;
  return proto.koinos.protocol.call_contract_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.call_contract_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.call_contract_operation}
 */
proto.koinos.protocol.call_contract_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntryPoint(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.call_contract_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.call_contract_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.call_contract_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.call_contract_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntryPoint();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getArgs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.call_contract_operation.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.call_contract_operation.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.call_contract_operation.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.call_contract_operation} returns this
 */
proto.koinos.protocol.call_contract_operation.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 entry_point = 2;
 * @return {number}
 */
proto.koinos.protocol.call_contract_operation.prototype.getEntryPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.call_contract_operation} returns this
 */
proto.koinos.protocol.call_contract_operation.prototype.setEntryPoint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes args = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.call_contract_operation.prototype.getArgs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes args = 3;
 * This is a type-conversion wrapper around `getArgs()`
 * @return {string}
 */
proto.koinos.protocol.call_contract_operation.prototype.getArgs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArgs()));
};


/**
 * optional bytes args = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgs()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.call_contract_operation.prototype.getArgs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArgs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.call_contract_operation} returns this
 */
proto.koinos.protocol.call_contract_operation.prototype.setArgs = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.set_system_call_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.set_system_call_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.set_system_call_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.set_system_call_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: (f = msg.getTarget()) && proto.koinos.protocol.system_call_target.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.set_system_call_operation}
 */
proto.koinos.protocol.set_system_call_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.set_system_call_operation;
  return proto.koinos.protocol.set_system_call_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.set_system_call_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.set_system_call_operation}
 */
proto.koinos.protocol.set_system_call_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCallId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.system_call_target;
      reader.readMessage(value,proto.koinos.protocol.system_call_target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.set_system_call_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.set_system_call_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.set_system_call_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.set_system_call_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.system_call_target.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 call_id = 1;
 * @return {number}
 */
proto.koinos.protocol.set_system_call_operation.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.set_system_call_operation} returns this
 */
proto.koinos.protocol.set_system_call_operation.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional system_call_target target = 2;
 * @return {?proto.koinos.protocol.system_call_target}
 */
proto.koinos.protocol.set_system_call_operation.prototype.getTarget = function() {
  return /** @type{?proto.koinos.protocol.system_call_target} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.system_call_target, 2));
};


/**
 * @param {?proto.koinos.protocol.system_call_target|undefined} value
 * @return {!proto.koinos.protocol.set_system_call_operation} returns this
*/
proto.koinos.protocol.set_system_call_operation.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.set_system_call_operation} returns this
 */
proto.koinos.protocol.set_system_call_operation.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.set_system_call_operation.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.set_system_contract_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.set_system_contract_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.set_system_contract_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.set_system_contract_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    systemContract: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.set_system_contract_operation}
 */
proto.koinos.protocol.set_system_contract_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.set_system_contract_operation;
  return proto.koinos.protocol.set_system_contract_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.set_system_contract_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.set_system_contract_operation}
 */
proto.koinos.protocol.set_system_contract_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSystemContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.set_system_contract_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.set_system_contract_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.set_system_contract_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.set_system_contract_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSystemContract();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.set_system_contract_operation.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.set_system_contract_operation.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.set_system_contract_operation.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.set_system_contract_operation} returns this
 */
proto.koinos.protocol.set_system_contract_operation.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool system_contract = 2;
 * @return {boolean}
 */
proto.koinos.protocol.set_system_contract_operation.prototype.getSystemContract = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.protocol.set_system_contract_operation} returns this
 */
proto.koinos.protocol.set_system_contract_operation.prototype.setSystemContract = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.operation.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.koinos.protocol.operation.OpCase = {
  OP_NOT_SET: 0,
  UPLOAD_CONTRACT: 1,
  CALL_CONTRACT: 2,
  SET_SYSTEM_CALL: 3,
  SET_SYSTEM_CONTRACT: 4
};

/**
 * @return {proto.koinos.protocol.operation.OpCase}
 */
proto.koinos.protocol.operation.prototype.getOpCase = function() {
  return /** @type {proto.koinos.protocol.operation.OpCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.operation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadContract: (f = msg.getUploadContract()) && proto.koinos.protocol.upload_contract_operation.toObject(includeInstance, f),
    callContract: (f = msg.getCallContract()) && proto.koinos.protocol.call_contract_operation.toObject(includeInstance, f),
    setSystemCall: (f = msg.getSetSystemCall()) && proto.koinos.protocol.set_system_call_operation.toObject(includeInstance, f),
    setSystemContract: (f = msg.getSetSystemContract()) && proto.koinos.protocol.set_system_contract_operation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.operation}
 */
proto.koinos.protocol.operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.operation;
  return proto.koinos.protocol.operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.operation}
 */
proto.koinos.protocol.operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.upload_contract_operation;
      reader.readMessage(value,proto.koinos.protocol.upload_contract_operation.deserializeBinaryFromReader);
      msg.setUploadContract(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.call_contract_operation;
      reader.readMessage(value,proto.koinos.protocol.call_contract_operation.deserializeBinaryFromReader);
      msg.setCallContract(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.set_system_call_operation;
      reader.readMessage(value,proto.koinos.protocol.set_system_call_operation.deserializeBinaryFromReader);
      msg.setSetSystemCall(value);
      break;
    case 4:
      var value = new proto.koinos.protocol.set_system_contract_operation;
      reader.readMessage(value,proto.koinos.protocol.set_system_contract_operation.deserializeBinaryFromReader);
      msg.setSetSystemContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.upload_contract_operation.serializeBinaryToWriter
    );
  }
  f = message.getCallContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.call_contract_operation.serializeBinaryToWriter
    );
  }
  f = message.getSetSystemCall();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.protocol.set_system_call_operation.serializeBinaryToWriter
    );
  }
  f = message.getSetSystemContract();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.koinos.protocol.set_system_contract_operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional upload_contract_operation upload_contract = 1;
 * @return {?proto.koinos.protocol.upload_contract_operation}
 */
proto.koinos.protocol.operation.prototype.getUploadContract = function() {
  return /** @type{?proto.koinos.protocol.upload_contract_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.upload_contract_operation, 1));
};


/**
 * @param {?proto.koinos.protocol.upload_contract_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setUploadContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearUploadContract = function() {
  return this.setUploadContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasUploadContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional call_contract_operation call_contract = 2;
 * @return {?proto.koinos.protocol.call_contract_operation}
 */
proto.koinos.protocol.operation.prototype.getCallContract = function() {
  return /** @type{?proto.koinos.protocol.call_contract_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.call_contract_operation, 2));
};


/**
 * @param {?proto.koinos.protocol.call_contract_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setCallContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearCallContract = function() {
  return this.setCallContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasCallContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional set_system_call_operation set_system_call = 3;
 * @return {?proto.koinos.protocol.set_system_call_operation}
 */
proto.koinos.protocol.operation.prototype.getSetSystemCall = function() {
  return /** @type{?proto.koinos.protocol.set_system_call_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.set_system_call_operation, 3));
};


/**
 * @param {?proto.koinos.protocol.set_system_call_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setSetSystemCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearSetSystemCall = function() {
  return this.setSetSystemCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasSetSystemCall = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional set_system_contract_operation set_system_contract = 4;
 * @return {?proto.koinos.protocol.set_system_contract_operation}
 */
proto.koinos.protocol.operation.prototype.getSetSystemContract = function() {
  return /** @type{?proto.koinos.protocol.set_system_contract_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.set_system_contract_operation, 4));
};


/**
 * @param {?proto.koinos.protocol.set_system_contract_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setSetSystemContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearSetSystemContract = function() {
  return this.setSetSystemContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasSetSystemContract = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.transaction_header.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.transaction_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.transaction_header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcLimit: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    operationMerkleRoot: msg.getOperationMerkleRoot_asB64(),
    payer: msg.getPayer_asB64(),
    payee: msg.getPayee_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.transaction_header}
 */
proto.koinos.protocol.transaction_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.transaction_header;
  return proto.koinos.protocol.transaction_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.transaction_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.transaction_header}
 */
proto.koinos.protocol.transaction_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRcLimit(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperationMerkleRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayer(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.transaction_header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.transaction_header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRcLimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getNonce();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getOperationMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPayer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPayee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 rc_limit = 1;
 * @return {string}
 */
proto.koinos.protocol.transaction_header.prototype.getRcLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_header} returns this
 */
proto.koinos.protocol.transaction_header.prototype.setRcLimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {string}
 */
proto.koinos.protocol.transaction_header.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_header} returns this
 */
proto.koinos.protocol.transaction_header.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bytes operation_merkle_root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_header.prototype.getOperationMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes operation_merkle_root = 3;
 * This is a type-conversion wrapper around `getOperationMerkleRoot()`
 * @return {string}
 */
proto.koinos.protocol.transaction_header.prototype.getOperationMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperationMerkleRoot()));
};


/**
 * optional bytes operation_merkle_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperationMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_header.prototype.getOperationMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperationMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_header} returns this
 */
proto.koinos.protocol.transaction_header.prototype.setOperationMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes payer = 4;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_header.prototype.getPayer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes payer = 4;
 * This is a type-conversion wrapper around `getPayer()`
 * @return {string}
 */
proto.koinos.protocol.transaction_header.prototype.getPayer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayer()));
};


/**
 * optional bytes payer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayer()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_header.prototype.getPayer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_header} returns this
 */
proto.koinos.protocol.transaction_header.prototype.setPayer = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes payee = 5;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_header.prototype.getPayee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes payee = 5;
 * This is a type-conversion wrapper around `getPayee()`
 * @return {string}
 */
proto.koinos.protocol.transaction_header.prototype.getPayee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayee()));
};


/**
 * optional bytes payee = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayee()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_header.prototype.getPayee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayee()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_header} returns this
 */
proto.koinos.protocol.transaction_header.prototype.setPayee = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.transaction.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    header: (f = msg.getHeader()) && proto.koinos.protocol.transaction_header.toObject(includeInstance, f),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.koinos.protocol.operation.toObject, includeInstance),
    signaturesList: msg.getSignaturesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.transaction}
 */
proto.koinos.protocol.transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.transaction;
  return proto.koinos.protocol.transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.transaction}
 */
proto.koinos.protocol.transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.transaction_header;
      reader.readMessage(value,proto.koinos.protocol.transaction_header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.operation;
      reader.readMessage(value,proto.koinos.protocol.operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.transaction_header.serializeBinaryToWriter
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.koinos.protocol.operation.serializeBinaryToWriter
    );
  }
  f = message.getSignaturesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.koinos.protocol.transaction.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional transaction_header header = 2;
 * @return {?proto.koinos.protocol.transaction_header}
 */
proto.koinos.protocol.transaction.prototype.getHeader = function() {
  return /** @type{?proto.koinos.protocol.transaction_header} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.transaction_header, 2));
};


/**
 * @param {?proto.koinos.protocol.transaction_header|undefined} value
 * @return {!proto.koinos.protocol.transaction} returns this
*/
proto.koinos.protocol.transaction.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated operation operations = 3;
 * @return {!Array<!proto.koinos.protocol.operation>}
 */
proto.koinos.protocol.transaction.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.operation, 3));
};


/**
 * @param {!Array<!proto.koinos.protocol.operation>} value
 * @return {!proto.koinos.protocol.transaction} returns this
*/
proto.koinos.protocol.transaction.prototype.setOperationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.koinos.protocol.operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.operation}
 */
proto.koinos.protocol.transaction.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.koinos.protocol.operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.clearOperationsList = function() {
  return this.setOperationsList([]);
};


/**
 * repeated bytes signatures = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.koinos.protocol.transaction.prototype.getSignaturesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes signatures = 4;
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<string>}
 */
proto.koinos.protocol.transaction.prototype.getSignaturesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignaturesList()));
};


/**
 * repeated bytes signatures = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.koinos.protocol.transaction.prototype.getSignaturesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignaturesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.setSignaturesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.addSignatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.transaction_receipt.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.transaction_receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.transaction_receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.transaction_receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    payer: msg.getPayer_asB64(),
    maxPayerRc: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    rcLimit: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    rcUsed: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    diskStorageUsed: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    networkBandwidthUsed: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    computeBandwidthUsed: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    reverted: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.koinos.protocol.event_data.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.transaction_receipt}
 */
proto.koinos.protocol.transaction_receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.transaction_receipt;
  return proto.koinos.protocol.transaction_receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.transaction_receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.transaction_receipt}
 */
proto.koinos.protocol.transaction_receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaxPayerRc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRcLimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRcUsed(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDiskStorageUsed(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNetworkBandwidthUsed(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setComputeBandwidthUsed(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverted(value);
      break;
    case 10:
      var value = new proto.koinos.protocol.event_data;
      reader.readMessage(value,proto.koinos.protocol.event_data.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.transaction_receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.transaction_receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPayer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMaxPayerRc();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getRcLimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getRcUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getDiskStorageUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getNetworkBandwidthUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = message.getComputeBandwidthUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = message.getReverted();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.koinos.protocol.event_data.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_receipt.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_receipt.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes payer = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_receipt.prototype.getPayer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payer = 2;
 * This is a type-conversion wrapper around `getPayer()`
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getPayer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayer()));
};


/**
 * optional bytes payer = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayer()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_receipt.prototype.getPayer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setPayer = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 max_payer_rc = 3;
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getMaxPayerRc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setMaxPayerRc = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint64 rc_limit = 4;
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getRcLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setRcLimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint64 rc_used = 5;
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getRcUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setRcUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 disk_storage_used = 6;
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getDiskStorageUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setDiskStorageUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint64 network_bandwidth_used = 7;
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getNetworkBandwidthUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setNetworkBandwidthUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * optional uint64 compute_bandwidth_used = 8;
 * @return {string}
 */
proto.koinos.protocol.transaction_receipt.prototype.getComputeBandwidthUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setComputeBandwidthUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional bool reverted = 9;
 * @return {boolean}
 */
proto.koinos.protocol.transaction_receipt.prototype.getReverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.setReverted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * repeated event_data events = 10;
 * @return {!Array<!proto.koinos.protocol.event_data>}
 */
proto.koinos.protocol.transaction_receipt.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.event_data>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.event_data, 10));
};


/**
 * @param {!Array<!proto.koinos.protocol.event_data>} value
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
*/
proto.koinos.protocol.transaction_receipt.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.koinos.protocol.event_data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.event_data}
 */
proto.koinos.protocol.transaction_receipt.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.koinos.protocol.event_data, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.transaction_receipt} returns this
 */
proto.koinos.protocol.transaction_receipt.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block_header.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block_header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    previous: msg.getPrevious_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    previousStateMerkleRoot: msg.getPreviousStateMerkleRoot_asB64(),
    transactionMerkleRoot: msg.getTransactionMerkleRoot_asB64(),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block_header}
 */
proto.koinos.protocol.block_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block_header;
  return proto.koinos.protocol.block_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block_header}
 */
proto.koinos.protocol.block_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevious(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousStateMerkleRoot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionMerkleRoot(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block_header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block_header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrevious_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getPreviousStateMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTransactionMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes previous = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_header.prototype.getPrevious = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes previous = 1;
 * This is a type-conversion wrapper around `getPrevious()`
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getPrevious_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevious()));
};


/**
 * optional bytes previous = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevious()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.getPrevious_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevious()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setPrevious = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional bytes previous_state_merkle_root = 4;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_header.prototype.getPreviousStateMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes previous_state_merkle_root = 4;
 * This is a type-conversion wrapper around `getPreviousStateMerkleRoot()`
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getPreviousStateMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousStateMerkleRoot()));
};


/**
 * optional bytes previous_state_merkle_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousStateMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.getPreviousStateMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousStateMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setPreviousStateMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes transaction_merkle_root = 5;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_header.prototype.getTransactionMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes transaction_merkle_root = 5;
 * This is a type-conversion wrapper around `getTransactionMerkleRoot()`
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getTransactionMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionMerkleRoot()));
};


/**
 * optional bytes transaction_merkle_root = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.getTransactionMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setTransactionMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes signer = 6;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_header.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signer = 6;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.block.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    header: (f = msg.getHeader()) && proto.koinos.protocol.block_header.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.koinos.protocol.transaction.toObject, includeInstance),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block}
 */
proto.koinos.protocol.block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block;
  return proto.koinos.protocol.block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block}
 */
proto.koinos.protocol.block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.block_header;
      reader.readMessage(value,proto.koinos.protocol.block_header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.transaction;
      reader.readMessage(value,proto.koinos.protocol.transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.block_header.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.koinos.protocol.transaction.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.koinos.protocol.block.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional block_header header = 2;
 * @return {?proto.koinos.protocol.block_header}
 */
proto.koinos.protocol.block.prototype.getHeader = function() {
  return /** @type{?proto.koinos.protocol.block_header} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block_header, 2));
};


/**
 * @param {?proto.koinos.protocol.block_header|undefined} value
 * @return {!proto.koinos.protocol.block} returns this
*/
proto.koinos.protocol.block.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated transaction transactions = 3;
 * @return {!Array<!proto.koinos.protocol.transaction>}
 */
proto.koinos.protocol.block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.transaction, 3));
};


/**
 * @param {!Array<!proto.koinos.protocol.transaction>} value
 * @return {!proto.koinos.protocol.block} returns this
*/
proto.koinos.protocol.block.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.koinos.protocol.transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.transaction}
 */
proto.koinos.protocol.block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.koinos.protocol.transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.koinos.protocol.block.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.block_receipt.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block_receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block_receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block_receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    diskStorageUsed: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    networkBandwidthUsed: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    computeBandwidthUsed: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    stateMerkleRoot: msg.getStateMerkleRoot_asB64(),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.koinos.protocol.event_data.toObject, includeInstance),
    transactionReceiptsList: jspb.Message.toObjectList(msg.getTransactionReceiptsList(),
    proto.koinos.protocol.transaction_receipt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block_receipt}
 */
proto.koinos.protocol.block_receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block_receipt;
  return proto.koinos.protocol.block_receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block_receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block_receipt}
 */
proto.koinos.protocol.block_receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDiskStorageUsed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNetworkBandwidthUsed(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setComputeBandwidthUsed(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateMerkleRoot(value);
      break;
    case 7:
      var value = new proto.koinos.protocol.event_data;
      reader.readMessage(value,proto.koinos.protocol.event_data.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 8:
      var value = new proto.koinos.protocol.transaction_receipt;
      reader.readMessage(value,proto.koinos.protocol.transaction_receipt.deserializeBinaryFromReader);
      msg.addTransactionReceipts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block_receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block_receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getDiskStorageUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getNetworkBandwidthUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getComputeBandwidthUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getStateMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.koinos.protocol.event_data.serializeBinaryToWriter
    );
  }
  f = message.getTransactionReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.koinos.protocol.transaction_receipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_receipt.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.koinos.protocol.block_receipt.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_receipt.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {string}
 */
proto.koinos.protocol.block_receipt.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 disk_storage_used = 3;
 * @return {string}
 */
proto.koinos.protocol.block_receipt.prototype.getDiskStorageUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.setDiskStorageUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint64 network_bandwidth_used = 4;
 * @return {string}
 */
proto.koinos.protocol.block_receipt.prototype.getNetworkBandwidthUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.setNetworkBandwidthUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint64 compute_bandwidth_used = 5;
 * @return {string}
 */
proto.koinos.protocol.block_receipt.prototype.getComputeBandwidthUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.setComputeBandwidthUsed = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional bytes state_merkle_root = 6;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_receipt.prototype.getStateMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes state_merkle_root = 6;
 * This is a type-conversion wrapper around `getStateMerkleRoot()`
 * @return {string}
 */
proto.koinos.protocol.block_receipt.prototype.getStateMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateMerkleRoot()));
};


/**
 * optional bytes state_merkle_root = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_receipt.prototype.getStateMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.setStateMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated event_data events = 7;
 * @return {!Array<!proto.koinos.protocol.event_data>}
 */
proto.koinos.protocol.block_receipt.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.event_data>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.event_data, 7));
};


/**
 * @param {!Array<!proto.koinos.protocol.event_data>} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
*/
proto.koinos.protocol.block_receipt.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.koinos.protocol.event_data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.event_data}
 */
proto.koinos.protocol.block_receipt.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.koinos.protocol.event_data, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * repeated transaction_receipt transaction_receipts = 8;
 * @return {!Array<!proto.koinos.protocol.transaction_receipt>}
 */
proto.koinos.protocol.block_receipt.prototype.getTransactionReceiptsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.transaction_receipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.transaction_receipt, 8));
};


/**
 * @param {!Array<!proto.koinos.protocol.transaction_receipt>} value
 * @return {!proto.koinos.protocol.block_receipt} returns this
*/
proto.koinos.protocol.block_receipt.prototype.setTransactionReceiptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.koinos.protocol.transaction_receipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.transaction_receipt}
 */
proto.koinos.protocol.block_receipt.prototype.addTransactionReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.koinos.protocol.transaction_receipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.block_receipt} returns this
 */
proto.koinos.protocol.block_receipt.prototype.clearTransactionReceiptsList = function() {
  return this.setTransactionReceiptsList([]);
};


