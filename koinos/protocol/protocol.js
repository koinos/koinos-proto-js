// source: koinos/protocol/protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.protocol.active_block_data');
goog.provide('proto.koinos.protocol.active_transaction_data');
goog.provide('proto.koinos.protocol.block');
goog.provide('proto.koinos.protocol.block_active_data');
goog.provide('proto.koinos.protocol.block_active_data.DataCase');
goog.provide('proto.koinos.protocol.block_header');
goog.provide('proto.koinos.protocol.block_passive_data');
goog.provide('proto.koinos.protocol.block_passive_data.DataCase');
goog.provide('proto.koinos.protocol.block_receipt');
goog.provide('proto.koinos.protocol.call_contract_operation');
goog.provide('proto.koinos.protocol.contract_call_bundle');
goog.provide('proto.koinos.protocol.operation');
goog.provide('proto.koinos.protocol.operation.OpCase');
goog.provide('proto.koinos.protocol.passive_block_data');
goog.provide('proto.koinos.protocol.passive_transaction_data');
goog.provide('proto.koinos.protocol.set_system_call_operation');
goog.provide('proto.koinos.protocol.system_call_target');
goog.provide('proto.koinos.protocol.system_call_target.TargetCase');
goog.provide('proto.koinos.protocol.transaction');
goog.provide('proto.koinos.protocol.transaction_active_data');
goog.provide('proto.koinos.protocol.transaction_active_data.DataCase');
goog.provide('proto.koinos.protocol.transaction_passive_data');
goog.provide('proto.koinos.protocol.transaction_passive_data.DataCase');
goog.provide('proto.koinos.protocol.upload_contract_operation');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.contract_call_bundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.contract_call_bundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.contract_call_bundle.displayName = 'proto.koinos.protocol.contract_call_bundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.system_call_target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.system_call_target.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.system_call_target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.system_call_target.displayName = 'proto.koinos.protocol.system_call_target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.upload_contract_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.upload_contract_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.upload_contract_operation.displayName = 'proto.koinos.protocol.upload_contract_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.call_contract_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.call_contract_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.call_contract_operation.displayName = 'proto.koinos.protocol.call_contract_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.set_system_call_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.set_system_call_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.set_system_call_operation.displayName = 'proto.koinos.protocol.set_system_call_operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.operation.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.operation.displayName = 'proto.koinos.protocol.operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.active_transaction_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.active_transaction_data.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.active_transaction_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.active_transaction_data.displayName = 'proto.koinos.protocol.active_transaction_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.passive_transaction_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.passive_transaction_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.passive_transaction_data.displayName = 'proto.koinos.protocol.passive_transaction_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.transaction_active_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.transaction_active_data.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.transaction_active_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.transaction_active_data.displayName = 'proto.koinos.protocol.transaction_active_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.transaction_passive_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.transaction_passive_data.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.transaction_passive_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.transaction_passive_data.displayName = 'proto.koinos.protocol.transaction_passive_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.transaction.displayName = 'proto.koinos.protocol.transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.active_block_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.active_block_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.active_block_data.displayName = 'proto.koinos.protocol.active_block_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.passive_block_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.passive_block_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.passive_block_data.displayName = 'proto.koinos.protocol.passive_block_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.block_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block_header.displayName = 'proto.koinos.protocol.block_header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block_active_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.block_active_data.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.block_active_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block_active_data.displayName = 'proto.koinos.protocol.block_active_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block_passive_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.koinos.protocol.block_passive_data.oneofGroups_);
};
goog.inherits(proto.koinos.protocol.block_passive_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block_passive_data.displayName = 'proto.koinos.protocol.block_passive_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.protocol.block.repeatedFields_, null);
};
goog.inherits(proto.koinos.protocol.block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block.displayName = 'proto.koinos.protocol.block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.protocol.block_receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.protocol.block_receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.protocol.block_receipt.displayName = 'proto.koinos.protocol.block_receipt';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.contract_call_bundle.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.contract_call_bundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.contract_call_bundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.contract_call_bundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    entrypoint: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.contract_call_bundle}
 */
proto.koinos.protocol.contract_call_bundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.contract_call_bundle;
  return proto.koinos.protocol.contract_call_bundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.contract_call_bundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.contract_call_bundle}
 */
proto.koinos.protocol.contract_call_bundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntrypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.contract_call_bundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.contract_call_bundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.contract_call_bundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.contract_call_bundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntrypoint();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.contract_call_bundle} returns this
 */
proto.koinos.protocol.contract_call_bundle.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 entrypoint = 2;
 * @return {number}
 */
proto.koinos.protocol.contract_call_bundle.prototype.getEntrypoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.contract_call_bundle} returns this
 */
proto.koinos.protocol.contract_call_bundle.prototype.setEntrypoint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.system_call_target.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.protocol.system_call_target.TargetCase = {
  TARGET_NOT_SET: 0,
  THUNK_ID: 1,
  SYSTEM_CALL_BUNDLE: 2
};

/**
 * @return {proto.koinos.protocol.system_call_target.TargetCase}
 */
proto.koinos.protocol.system_call_target.prototype.getTargetCase = function() {
  return /** @type {proto.koinos.protocol.system_call_target.TargetCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.system_call_target.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.system_call_target.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.system_call_target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.system_call_target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.system_call_target.toObject = function(includeInstance, msg) {
  var f, obj = {
    thunkId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemCallBundle: (f = msg.getSystemCallBundle()) && proto.koinos.protocol.contract_call_bundle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.system_call_target}
 */
proto.koinos.protocol.system_call_target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.system_call_target;
  return proto.koinos.protocol.system_call_target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.system_call_target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.system_call_target}
 */
proto.koinos.protocol.system_call_target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThunkId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.contract_call_bundle;
      reader.readMessage(value,proto.koinos.protocol.contract_call_bundle.deserializeBinaryFromReader);
      msg.setSystemCallBundle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.system_call_target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.system_call_target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.system_call_target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.system_call_target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSystemCallBundle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.contract_call_bundle.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 thunk_id = 1;
 * @return {number}
 */
proto.koinos.protocol.system_call_target.prototype.getThunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.system_call_target} returns this
 */
proto.koinos.protocol.system_call_target.prototype.setThunkId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.koinos.protocol.system_call_target.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.koinos.protocol.system_call_target} returns this
 */
proto.koinos.protocol.system_call_target.prototype.clearThunkId = function() {
  return jspb.Message.setOneofField(this, 1, proto.koinos.protocol.system_call_target.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.system_call_target.prototype.hasThunkId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional contract_call_bundle system_call_bundle = 2;
 * @return {?proto.koinos.protocol.contract_call_bundle}
 */
proto.koinos.protocol.system_call_target.prototype.getSystemCallBundle = function() {
  return /** @type{?proto.koinos.protocol.contract_call_bundle} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.contract_call_bundle, 2));
};


/**
 * @param {?proto.koinos.protocol.contract_call_bundle|undefined} value
 * @return {!proto.koinos.protocol.system_call_target} returns this
*/
proto.koinos.protocol.system_call_target.prototype.setSystemCallBundle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.protocol.system_call_target.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.system_call_target} returns this
 */
proto.koinos.protocol.system_call_target.prototype.clearSystemCallBundle = function() {
  return this.setSystemCallBundle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.system_call_target.prototype.hasSystemCallBundle = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.upload_contract_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.upload_contract_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.upload_contract_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.upload_contract_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    bytecode: msg.getBytecode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.upload_contract_operation}
 */
proto.koinos.protocol.upload_contract_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.upload_contract_operation;
  return proto.koinos.protocol.upload_contract_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.upload_contract_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.upload_contract_operation}
 */
proto.koinos.protocol.upload_contract_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.upload_contract_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.upload_contract_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.upload_contract_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.upload_contract_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBytecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes bytecode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getBytecode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bytecode = 2;
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {string}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getBytecode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytecode()));
};


/**
 * optional bytes bytecode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.upload_contract_operation.prototype.getBytecode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytecode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.upload_contract_operation} returns this
 */
proto.koinos.protocol.upload_contract_operation.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.call_contract_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.call_contract_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.call_contract_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.call_contract_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    entrypoint: jspb.Message.getFieldWithDefault(msg, 2, 0),
    args: msg.getArgs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.call_contract_operation}
 */
proto.koinos.protocol.call_contract_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.call_contract_operation;
  return proto.koinos.protocol.call_contract_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.call_contract_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.call_contract_operation}
 */
proto.koinos.protocol.call_contract_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntrypoint(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.call_contract_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.call_contract_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.call_contract_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.call_contract_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntrypoint();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getArgs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.call_contract_operation.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.koinos.protocol.call_contract_operation.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.call_contract_operation.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.call_contract_operation} returns this
 */
proto.koinos.protocol.call_contract_operation.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 entrypoint = 2;
 * @return {number}
 */
proto.koinos.protocol.call_contract_operation.prototype.getEntrypoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.call_contract_operation} returns this
 */
proto.koinos.protocol.call_contract_operation.prototype.setEntrypoint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes args = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.call_contract_operation.prototype.getArgs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes args = 3;
 * This is a type-conversion wrapper around `getArgs()`
 * @return {string}
 */
proto.koinos.protocol.call_contract_operation.prototype.getArgs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArgs()));
};


/**
 * optional bytes args = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgs()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.call_contract_operation.prototype.getArgs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArgs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.call_contract_operation} returns this
 */
proto.koinos.protocol.call_contract_operation.prototype.setArgs = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.set_system_call_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.set_system_call_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.set_system_call_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.set_system_call_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: (f = msg.getTarget()) && proto.koinos.protocol.system_call_target.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.set_system_call_operation}
 */
proto.koinos.protocol.set_system_call_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.set_system_call_operation;
  return proto.koinos.protocol.set_system_call_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.set_system_call_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.set_system_call_operation}
 */
proto.koinos.protocol.set_system_call_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCallId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.system_call_target;
      reader.readMessage(value,proto.koinos.protocol.system_call_target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.set_system_call_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.set_system_call_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.set_system_call_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.set_system_call_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.system_call_target.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 call_id = 1;
 * @return {number}
 */
proto.koinos.protocol.set_system_call_operation.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.set_system_call_operation} returns this
 */
proto.koinos.protocol.set_system_call_operation.prototype.setCallId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional system_call_target target = 2;
 * @return {?proto.koinos.protocol.system_call_target}
 */
proto.koinos.protocol.set_system_call_operation.prototype.getTarget = function() {
  return /** @type{?proto.koinos.protocol.system_call_target} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.system_call_target, 2));
};


/**
 * @param {?proto.koinos.protocol.system_call_target|undefined} value
 * @return {!proto.koinos.protocol.set_system_call_operation} returns this
*/
proto.koinos.protocol.set_system_call_operation.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.set_system_call_operation} returns this
 */
proto.koinos.protocol.set_system_call_operation.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.set_system_call_operation.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.operation.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.koinos.protocol.operation.OpCase = {
  OP_NOT_SET: 0,
  UPLOAD_CONTRACT: 1,
  CALL_CONTRACT: 2,
  SET_SYSTEM_CALL: 3
};

/**
 * @return {proto.koinos.protocol.operation.OpCase}
 */
proto.koinos.protocol.operation.prototype.getOpCase = function() {
  return /** @type {proto.koinos.protocol.operation.OpCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.operation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.operation.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadContract: (f = msg.getUploadContract()) && proto.koinos.protocol.upload_contract_operation.toObject(includeInstance, f),
    callContract: (f = msg.getCallContract()) && proto.koinos.protocol.call_contract_operation.toObject(includeInstance, f),
    setSystemCall: (f = msg.getSetSystemCall()) && proto.koinos.protocol.set_system_call_operation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.operation}
 */
proto.koinos.protocol.operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.operation;
  return proto.koinos.protocol.operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.operation}
 */
proto.koinos.protocol.operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.upload_contract_operation;
      reader.readMessage(value,proto.koinos.protocol.upload_contract_operation.deserializeBinaryFromReader);
      msg.setUploadContract(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.call_contract_operation;
      reader.readMessage(value,proto.koinos.protocol.call_contract_operation.deserializeBinaryFromReader);
      msg.setCallContract(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.set_system_call_operation;
      reader.readMessage(value,proto.koinos.protocol.set_system_call_operation.deserializeBinaryFromReader);
      msg.setSetSystemCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.upload_contract_operation.serializeBinaryToWriter
    );
  }
  f = message.getCallContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.call_contract_operation.serializeBinaryToWriter
    );
  }
  f = message.getSetSystemCall();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.protocol.set_system_call_operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional upload_contract_operation upload_contract = 1;
 * @return {?proto.koinos.protocol.upload_contract_operation}
 */
proto.koinos.protocol.operation.prototype.getUploadContract = function() {
  return /** @type{?proto.koinos.protocol.upload_contract_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.upload_contract_operation, 1));
};


/**
 * @param {?proto.koinos.protocol.upload_contract_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setUploadContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearUploadContract = function() {
  return this.setUploadContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasUploadContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional call_contract_operation call_contract = 2;
 * @return {?proto.koinos.protocol.call_contract_operation}
 */
proto.koinos.protocol.operation.prototype.getCallContract = function() {
  return /** @type{?proto.koinos.protocol.call_contract_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.call_contract_operation, 2));
};


/**
 * @param {?proto.koinos.protocol.call_contract_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setCallContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearCallContract = function() {
  return this.setCallContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasCallContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional set_system_call_operation set_system_call = 3;
 * @return {?proto.koinos.protocol.set_system_call_operation}
 */
proto.koinos.protocol.operation.prototype.getSetSystemCall = function() {
  return /** @type{?proto.koinos.protocol.set_system_call_operation} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.set_system_call_operation, 3));
};


/**
 * @param {?proto.koinos.protocol.set_system_call_operation|undefined} value
 * @return {!proto.koinos.protocol.operation} returns this
*/
proto.koinos.protocol.operation.prototype.setSetSystemCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.koinos.protocol.operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.operation} returns this
 */
proto.koinos.protocol.operation.prototype.clearSetSystemCall = function() {
  return this.setSetSystemCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.operation.prototype.hasSetSystemCall = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.active_transaction_data.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.active_transaction_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.active_transaction_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.active_transaction_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.active_transaction_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceLimit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.koinos.protocol.operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.active_transaction_data}
 */
proto.koinos.protocol.active_transaction_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.active_transaction_data;
  return proto.koinos.protocol.active_transaction_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.active_transaction_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.active_transaction_data}
 */
proto.koinos.protocol.active_transaction_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResourceLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.operation;
      reader.readMessage(value,proto.koinos.protocol.operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.active_transaction_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.active_transaction_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.active_transaction_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.active_transaction_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceLimit();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.koinos.protocol.operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 resource_limit = 1;
 * @return {number}
 */
proto.koinos.protocol.active_transaction_data.prototype.getResourceLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.active_transaction_data} returns this
 */
proto.koinos.protocol.active_transaction_data.prototype.setResourceLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.koinos.protocol.active_transaction_data.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.active_transaction_data} returns this
 */
proto.koinos.protocol.active_transaction_data.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated operation operations = 3;
 * @return {!Array<!proto.koinos.protocol.operation>}
 */
proto.koinos.protocol.active_transaction_data.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.operation, 3));
};


/**
 * @param {!Array<!proto.koinos.protocol.operation>} value
 * @return {!proto.koinos.protocol.active_transaction_data} returns this
*/
proto.koinos.protocol.active_transaction_data.prototype.setOperationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.koinos.protocol.operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.operation}
 */
proto.koinos.protocol.active_transaction_data.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.koinos.protocol.operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.active_transaction_data} returns this
 */
proto.koinos.protocol.active_transaction_data.prototype.clearOperationsList = function() {
  return this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.passive_transaction_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.passive_transaction_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.passive_transaction_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.passive_transaction_data.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.passive_transaction_data}
 */
proto.koinos.protocol.passive_transaction_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.passive_transaction_data;
  return proto.koinos.protocol.passive_transaction_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.passive_transaction_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.passive_transaction_data}
 */
proto.koinos.protocol.passive_transaction_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.passive_transaction_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.passive_transaction_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.passive_transaction_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.passive_transaction_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.transaction_active_data.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.protocol.transaction_active_data.DataCase = {
  DATA_NOT_SET: 0,
  NATIVE: 1,
  BLOB: 2
};

/**
 * @return {proto.koinos.protocol.transaction_active_data.DataCase}
 */
proto.koinos.protocol.transaction_active_data.prototype.getDataCase = function() {
  return /** @type {proto.koinos.protocol.transaction_active_data.DataCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.transaction_active_data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.transaction_active_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.transaction_active_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.transaction_active_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_active_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_native: (f = msg.getNative()) && proto.koinos.protocol.active_transaction_data.toObject(includeInstance, f),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.transaction_active_data}
 */
proto.koinos.protocol.transaction_active_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.transaction_active_data;
  return proto.koinos.protocol.transaction_active_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.transaction_active_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.transaction_active_data}
 */
proto.koinos.protocol.transaction_active_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.active_transaction_data;
      reader.readMessage(value,proto.koinos.protocol.active_transaction_data.deserializeBinaryFromReader);
      msg.setNative(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_active_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.transaction_active_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.transaction_active_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_active_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNative();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.active_transaction_data.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional active_transaction_data native = 1;
 * @return {?proto.koinos.protocol.active_transaction_data}
 */
proto.koinos.protocol.transaction_active_data.prototype.getNative = function() {
  return /** @type{?proto.koinos.protocol.active_transaction_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.active_transaction_data, 1));
};


/**
 * @param {?proto.koinos.protocol.active_transaction_data|undefined} value
 * @return {!proto.koinos.protocol.transaction_active_data} returns this
*/
proto.koinos.protocol.transaction_active_data.prototype.setNative = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.protocol.transaction_active_data.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.transaction_active_data} returns this
 */
proto.koinos.protocol.transaction_active_data.prototype.clearNative = function() {
  return this.setNative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction_active_data.prototype.hasNative = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes blob = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_active_data.prototype.getBlob = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.koinos.protocol.transaction_active_data.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_active_data.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_active_data} returns this
 */
proto.koinos.protocol.transaction_active_data.prototype.setBlob = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.transaction_active_data.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.koinos.protocol.transaction_active_data} returns this
 */
proto.koinos.protocol.transaction_active_data.prototype.clearBlob = function() {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.transaction_active_data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction_active_data.prototype.hasBlob = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.transaction_passive_data.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.protocol.transaction_passive_data.DataCase = {
  DATA_NOT_SET: 0,
  NATIVE: 1,
  BLOB: 2
};

/**
 * @return {proto.koinos.protocol.transaction_passive_data.DataCase}
 */
proto.koinos.protocol.transaction_passive_data.prototype.getDataCase = function() {
  return /** @type {proto.koinos.protocol.transaction_passive_data.DataCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.transaction_passive_data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.transaction_passive_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.transaction_passive_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.transaction_passive_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_passive_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_native: (f = msg.getNative()) && proto.koinos.protocol.passive_transaction_data.toObject(includeInstance, f),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.transaction_passive_data}
 */
proto.koinos.protocol.transaction_passive_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.transaction_passive_data;
  return proto.koinos.protocol.transaction_passive_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.transaction_passive_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.transaction_passive_data}
 */
proto.koinos.protocol.transaction_passive_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.passive_transaction_data;
      reader.readMessage(value,proto.koinos.protocol.passive_transaction_data.deserializeBinaryFromReader);
      msg.setNative(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_passive_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.transaction_passive_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.transaction_passive_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction_passive_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNative();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.passive_transaction_data.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional passive_transaction_data native = 1;
 * @return {?proto.koinos.protocol.passive_transaction_data}
 */
proto.koinos.protocol.transaction_passive_data.prototype.getNative = function() {
  return /** @type{?proto.koinos.protocol.passive_transaction_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.passive_transaction_data, 1));
};


/**
 * @param {?proto.koinos.protocol.passive_transaction_data|undefined} value
 * @return {!proto.koinos.protocol.transaction_passive_data} returns this
*/
proto.koinos.protocol.transaction_passive_data.prototype.setNative = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.protocol.transaction_passive_data.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.transaction_passive_data} returns this
 */
proto.koinos.protocol.transaction_passive_data.prototype.clearNative = function() {
  return this.setNative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction_passive_data.prototype.hasNative = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes blob = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction_passive_data.prototype.getBlob = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.koinos.protocol.transaction_passive_data.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction_passive_data.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction_passive_data} returns this
 */
proto.koinos.protocol.transaction_passive_data.prototype.setBlob = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.transaction_passive_data.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.koinos.protocol.transaction_passive_data} returns this
 */
proto.koinos.protocol.transaction_passive_data.prototype.clearBlob = function() {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.transaction_passive_data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction_passive_data.prototype.hasBlob = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    active: (f = msg.getActive()) && proto.koinos.protocol.transaction_active_data.toObject(includeInstance, f),
    passive: (f = msg.getPassive()) && proto.koinos.protocol.transaction_passive_data.toObject(includeInstance, f),
    signatureData: msg.getSignatureData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.transaction}
 */
proto.koinos.protocol.transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.transaction;
  return proto.koinos.protocol.transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.transaction}
 */
proto.koinos.protocol.transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.transaction_active_data;
      reader.readMessage(value,proto.koinos.protocol.transaction_active_data.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.transaction_passive_data;
      reader.readMessage(value,proto.koinos.protocol.transaction_passive_data.deserializeBinaryFromReader);
      msg.setPassive(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatureData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.transaction_active_data.serializeBinaryToWriter
    );
  }
  f = message.getPassive();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.protocol.transaction_passive_data.serializeBinaryToWriter
    );
  }
  f = message.getSignatureData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.koinos.protocol.transaction.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional transaction_active_data active = 2;
 * @return {?proto.koinos.protocol.transaction_active_data}
 */
proto.koinos.protocol.transaction.prototype.getActive = function() {
  return /** @type{?proto.koinos.protocol.transaction_active_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.transaction_active_data, 2));
};


/**
 * @param {?proto.koinos.protocol.transaction_active_data|undefined} value
 * @return {!proto.koinos.protocol.transaction} returns this
*/
proto.koinos.protocol.transaction.prototype.setActive = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.clearActive = function() {
  return this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction.prototype.hasActive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional transaction_passive_data passive = 3;
 * @return {?proto.koinos.protocol.transaction_passive_data}
 */
proto.koinos.protocol.transaction.prototype.getPassive = function() {
  return /** @type{?proto.koinos.protocol.transaction_passive_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.transaction_passive_data, 3));
};


/**
 * @param {?proto.koinos.protocol.transaction_passive_data|undefined} value
 * @return {!proto.koinos.protocol.transaction} returns this
*/
proto.koinos.protocol.transaction.prototype.setPassive = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.clearPassive = function() {
  return this.setPassive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.transaction.prototype.hasPassive = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signature_data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.transaction.prototype.getSignatureData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature_data = 4;
 * This is a type-conversion wrapper around `getSignatureData()`
 * @return {string}
 */
proto.koinos.protocol.transaction.prototype.getSignatureData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatureData()));
};


/**
 * optional bytes signature_data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureData()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.transaction.prototype.getSignatureData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatureData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.transaction} returns this
 */
proto.koinos.protocol.transaction.prototype.setSignatureData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.active_block_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.active_block_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.active_block_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.active_block_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionMerkleRoot: msg.getTransactionMerkleRoot_asB64(),
    passiveDataMerkleRoot: msg.getPassiveDataMerkleRoot_asB64(),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.active_block_data}
 */
proto.koinos.protocol.active_block_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.active_block_data;
  return proto.koinos.protocol.active_block_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.active_block_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.active_block_data}
 */
proto.koinos.protocol.active_block_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionMerkleRoot(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassiveDataMerkleRoot(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.active_block_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.active_block_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.active_block_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.active_block_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPassiveDataMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes transaction_merkle_root = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.active_block_data.prototype.getTransactionMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction_merkle_root = 1;
 * This is a type-conversion wrapper around `getTransactionMerkleRoot()`
 * @return {string}
 */
proto.koinos.protocol.active_block_data.prototype.getTransactionMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionMerkleRoot()));
};


/**
 * optional bytes transaction_merkle_root = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.active_block_data.prototype.getTransactionMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.active_block_data} returns this
 */
proto.koinos.protocol.active_block_data.prototype.setTransactionMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes passive_data_merkle_root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.active_block_data.prototype.getPassiveDataMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes passive_data_merkle_root = 2;
 * This is a type-conversion wrapper around `getPassiveDataMerkleRoot()`
 * @return {string}
 */
proto.koinos.protocol.active_block_data.prototype.getPassiveDataMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassiveDataMerkleRoot()));
};


/**
 * optional bytes passive_data_merkle_root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassiveDataMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.active_block_data.prototype.getPassiveDataMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassiveDataMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.active_block_data} returns this
 */
proto.koinos.protocol.active_block_data.prototype.setPassiveDataMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signer = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.active_block_data.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signer = 3;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.koinos.protocol.active_block_data.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.active_block_data.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.active_block_data} returns this
 */
proto.koinos.protocol.active_block_data.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.passive_block_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.passive_block_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.passive_block_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.passive_block_data.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.passive_block_data}
 */
proto.koinos.protocol.passive_block_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.passive_block_data;
  return proto.koinos.protocol.passive_block_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.passive_block_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.passive_block_data}
 */
proto.koinos.protocol.passive_block_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.passive_block_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.passive_block_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.passive_block_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.passive_block_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block_header.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block_header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    previous: msg.getPrevious_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block_header}
 */
proto.koinos.protocol.block_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block_header;
  return proto.koinos.protocol.block_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block_header}
 */
proto.koinos.protocol.block_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevious(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block_header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block_header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrevious_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes previous = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_header.prototype.getPrevious = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes previous = 1;
 * This is a type-conversion wrapper around `getPrevious()`
 * @return {string}
 */
proto.koinos.protocol.block_header.prototype.getPrevious_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevious()));
};


/**
 * optional bytes previous = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevious()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_header.prototype.getPrevious_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevious()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setPrevious = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.koinos.protocol.block_header.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.koinos.protocol.block_header.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.protocol.block_header} returns this
 */
proto.koinos.protocol.block_header.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.block_active_data.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.protocol.block_active_data.DataCase = {
  DATA_NOT_SET: 0,
  NATIVE: 1,
  BLOB: 2
};

/**
 * @return {proto.koinos.protocol.block_active_data.DataCase}
 */
proto.koinos.protocol.block_active_data.prototype.getDataCase = function() {
  return /** @type {proto.koinos.protocol.block_active_data.DataCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.block_active_data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block_active_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block_active_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block_active_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_active_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_native: (f = msg.getNative()) && proto.koinos.protocol.active_block_data.toObject(includeInstance, f),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block_active_data}
 */
proto.koinos.protocol.block_active_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block_active_data;
  return proto.koinos.protocol.block_active_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block_active_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block_active_data}
 */
proto.koinos.protocol.block_active_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.active_block_data;
      reader.readMessage(value,proto.koinos.protocol.active_block_data.deserializeBinaryFromReader);
      msg.setNative(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_active_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block_active_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block_active_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_active_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNative();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.active_block_data.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional active_block_data native = 1;
 * @return {?proto.koinos.protocol.active_block_data}
 */
proto.koinos.protocol.block_active_data.prototype.getNative = function() {
  return /** @type{?proto.koinos.protocol.active_block_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.active_block_data, 1));
};


/**
 * @param {?proto.koinos.protocol.active_block_data|undefined} value
 * @return {!proto.koinos.protocol.block_active_data} returns this
*/
proto.koinos.protocol.block_active_data.prototype.setNative = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.protocol.block_active_data.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.block_active_data} returns this
 */
proto.koinos.protocol.block_active_data.prototype.clearNative = function() {
  return this.setNative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block_active_data.prototype.hasNative = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes blob = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_active_data.prototype.getBlob = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.koinos.protocol.block_active_data.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_active_data.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_active_data} returns this
 */
proto.koinos.protocol.block_active_data.prototype.setBlob = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.block_active_data.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.koinos.protocol.block_active_data} returns this
 */
proto.koinos.protocol.block_active_data.prototype.clearBlob = function() {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.block_active_data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block_active_data.prototype.hasBlob = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.koinos.protocol.block_passive_data.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.koinos.protocol.block_passive_data.DataCase = {
  DATA_NOT_SET: 0,
  NATIVE: 1,
  BLOB: 2
};

/**
 * @return {proto.koinos.protocol.block_passive_data.DataCase}
 */
proto.koinos.protocol.block_passive_data.prototype.getDataCase = function() {
  return /** @type {proto.koinos.protocol.block_passive_data.DataCase} */(jspb.Message.computeOneofCase(this, proto.koinos.protocol.block_passive_data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block_passive_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block_passive_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block_passive_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_passive_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_native: (f = msg.getNative()) && proto.koinos.protocol.passive_block_data.toObject(includeInstance, f),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block_passive_data}
 */
proto.koinos.protocol.block_passive_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block_passive_data;
  return proto.koinos.protocol.block_passive_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block_passive_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block_passive_data}
 */
proto.koinos.protocol.block_passive_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.protocol.passive_block_data;
      reader.readMessage(value,proto.koinos.protocol.passive_block_data.deserializeBinaryFromReader);
      msg.setNative(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_passive_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block_passive_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block_passive_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_passive_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNative();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.protocol.passive_block_data.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional passive_block_data native = 1;
 * @return {?proto.koinos.protocol.passive_block_data}
 */
proto.koinos.protocol.block_passive_data.prototype.getNative = function() {
  return /** @type{?proto.koinos.protocol.passive_block_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.passive_block_data, 1));
};


/**
 * @param {?proto.koinos.protocol.passive_block_data|undefined} value
 * @return {!proto.koinos.protocol.block_passive_data} returns this
*/
proto.koinos.protocol.block_passive_data.prototype.setNative = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.koinos.protocol.block_passive_data.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.block_passive_data} returns this
 */
proto.koinos.protocol.block_passive_data.prototype.clearNative = function() {
  return this.setNative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block_passive_data.prototype.hasNative = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes blob = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block_passive_data.prototype.getBlob = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.koinos.protocol.block_passive_data.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_passive_data.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block_passive_data} returns this
 */
proto.koinos.protocol.block_passive_data.prototype.setBlob = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.block_passive_data.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.koinos.protocol.block_passive_data} returns this
 */
proto.koinos.protocol.block_passive_data.prototype.clearBlob = function() {
  return jspb.Message.setOneofField(this, 2, proto.koinos.protocol.block_passive_data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block_passive_data.prototype.hasBlob = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.protocol.block.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    header: (f = msg.getHeader()) && proto.koinos.protocol.block_header.toObject(includeInstance, f),
    active: (f = msg.getActive()) && proto.koinos.protocol.block_active_data.toObject(includeInstance, f),
    passive: (f = msg.getPassive()) && proto.koinos.protocol.block_passive_data.toObject(includeInstance, f),
    signatureData: msg.getSignatureData_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.koinos.protocol.transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block}
 */
proto.koinos.protocol.block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block;
  return proto.koinos.protocol.block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block}
 */
proto.koinos.protocol.block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.koinos.protocol.block_header;
      reader.readMessage(value,proto.koinos.protocol.block_header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.koinos.protocol.block_active_data;
      reader.readMessage(value,proto.koinos.protocol.block_active_data.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    case 4:
      var value = new proto.koinos.protocol.block_passive_data;
      reader.readMessage(value,proto.koinos.protocol.block_passive_data.deserializeBinaryFromReader);
      msg.setPassive(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatureData(value);
      break;
    case 6:
      var value = new proto.koinos.protocol.transaction;
      reader.readMessage(value,proto.koinos.protocol.transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.koinos.protocol.block_header.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.koinos.protocol.block_active_data.serializeBinaryToWriter
    );
  }
  f = message.getPassive();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.koinos.protocol.block_passive_data.serializeBinaryToWriter
    );
  }
  f = message.getSignatureData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.koinos.protocol.transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.koinos.protocol.block.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional block_header header = 2;
 * @return {?proto.koinos.protocol.block_header}
 */
proto.koinos.protocol.block.prototype.getHeader = function() {
  return /** @type{?proto.koinos.protocol.block_header} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block_header, 2));
};


/**
 * @param {?proto.koinos.protocol.block_header|undefined} value
 * @return {!proto.koinos.protocol.block} returns this
*/
proto.koinos.protocol.block.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional block_active_data active = 3;
 * @return {?proto.koinos.protocol.block_active_data}
 */
proto.koinos.protocol.block.prototype.getActive = function() {
  return /** @type{?proto.koinos.protocol.block_active_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block_active_data, 3));
};


/**
 * @param {?proto.koinos.protocol.block_active_data|undefined} value
 * @return {!proto.koinos.protocol.block} returns this
*/
proto.koinos.protocol.block.prototype.setActive = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.clearActive = function() {
  return this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block.prototype.hasActive = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional block_passive_data passive = 4;
 * @return {?proto.koinos.protocol.block_passive_data}
 */
proto.koinos.protocol.block.prototype.getPassive = function() {
  return /** @type{?proto.koinos.protocol.block_passive_data} */ (
    jspb.Message.getWrapperField(this, proto.koinos.protocol.block_passive_data, 4));
};


/**
 * @param {?proto.koinos.protocol.block_passive_data|undefined} value
 * @return {!proto.koinos.protocol.block} returns this
*/
proto.koinos.protocol.block.prototype.setPassive = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.clearPassive = function() {
  return this.setPassive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.protocol.block.prototype.hasPassive = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes signature_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.protocol.block.prototype.getSignatureData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature_data = 5;
 * This is a type-conversion wrapper around `getSignatureData()`
 * @return {string}
 */
proto.koinos.protocol.block.prototype.getSignatureData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatureData()));
};


/**
 * optional bytes signature_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureData()`
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block.prototype.getSignatureData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatureData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.setSignatureData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated transaction transactions = 6;
 * @return {!Array<!proto.koinos.protocol.transaction>}
 */
proto.koinos.protocol.block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.koinos.protocol.transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.protocol.transaction, 6));
};


/**
 * @param {!Array<!proto.koinos.protocol.transaction>} value
 * @return {!proto.koinos.protocol.block} returns this
*/
proto.koinos.protocol.block.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.koinos.protocol.transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.protocol.transaction}
 */
proto.koinos.protocol.block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.koinos.protocol.transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.protocol.block} returns this
 */
proto.koinos.protocol.block.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.protocol.block_receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.protocol.block_receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.protocol.block_receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_receipt.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.protocol.block_receipt}
 */
proto.koinos.protocol.block_receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.protocol.block_receipt;
  return proto.koinos.protocol.block_receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.protocol.block_receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.protocol.block_receipt}
 */
proto.koinos.protocol.block_receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.protocol.block_receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.protocol.block_receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.protocol.block_receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.protocol.block_receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


