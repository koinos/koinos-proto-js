// source: koinos/chain/chain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.chain.caller_data');
goog.provide('proto.koinos.chain.compute_bandwidth_entry');
goog.provide('proto.koinos.chain.compute_bandwidth_registry');
goog.provide('proto.koinos.chain.contract_metadata_object');
goog.provide('proto.koinos.chain.database_key');
goog.provide('proto.koinos.chain.genesis_data');
goog.provide('proto.koinos.chain.genesis_entry');
goog.provide('proto.koinos.chain.head_info');
goog.provide('proto.koinos.chain.max_account_resources');
goog.provide('proto.koinos.chain.object_space');
goog.provide('proto.koinos.chain.privilege');
goog.provide('proto.koinos.chain.resource_limit_data');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.koinos.block_topology');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.object_space = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.object_space, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.object_space.displayName = 'proto.koinos.chain.object_space';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.database_key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.database_key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.database_key.displayName = 'proto.koinos.chain.database_key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.max_account_resources = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.max_account_resources, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.max_account_resources.displayName = 'proto.koinos.chain.max_account_resources';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.head_info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.head_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.head_info.displayName = 'proto.koinos.chain.head_info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.caller_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.caller_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.caller_data.displayName = 'proto.koinos.chain.caller_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.resource_limit_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.resource_limit_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.resource_limit_data.displayName = 'proto.koinos.chain.resource_limit_data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.contract_metadata_object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.contract_metadata_object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.contract_metadata_object.displayName = 'proto.koinos.chain.contract_metadata_object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.compute_bandwidth_entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.compute_bandwidth_entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.compute_bandwidth_entry.displayName = 'proto.koinos.chain.compute_bandwidth_entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.compute_bandwidth_registry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.chain.compute_bandwidth_registry.repeatedFields_, null);
};
goog.inherits(proto.koinos.chain.compute_bandwidth_registry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.compute_bandwidth_registry.displayName = 'proto.koinos.chain.compute_bandwidth_registry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.genesis_entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.chain.genesis_entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.genesis_entry.displayName = 'proto.koinos.chain.genesis_entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.chain.genesis_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.koinos.chain.genesis_data.repeatedFields_, null);
};
goog.inherits(proto.koinos.chain.genesis_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.chain.genesis_data.displayName = 'proto.koinos.chain.genesis_data';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.object_space.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.object_space.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.object_space} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.object_space.toObject = function(includeInstance, msg) {
  var f, obj = {
    system: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    zone: msg.getZone_asB64(),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.object_space}
 */
proto.koinos.chain.object_space.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.object_space;
  return proto.koinos.chain.object_space.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.object_space} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.object_space}
 */
proto.koinos.chain.object_space.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSystem(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setZone(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.object_space.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.object_space.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.object_space} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.object_space.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystem();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getZone_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool system = 1;
 * @return {boolean}
 */
proto.koinos.chain.object_space.prototype.getSystem = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.chain.object_space} returns this
 */
proto.koinos.chain.object_space.prototype.setSystem = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes zone = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.chain.object_space.prototype.getZone = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes zone = 2;
 * This is a type-conversion wrapper around `getZone()`
 * @return {string}
 */
proto.koinos.chain.object_space.prototype.getZone_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getZone()));
};


/**
 * optional bytes zone = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getZone()`
 * @return {!Uint8Array}
 */
proto.koinos.chain.object_space.prototype.getZone_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getZone()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.chain.object_space} returns this
 */
proto.koinos.chain.object_space.prototype.setZone = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 id = 3;
 * @return {number}
 */
proto.koinos.chain.object_space.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.chain.object_space} returns this
 */
proto.koinos.chain.object_space.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.database_key.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.database_key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.database_key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.database_key.toObject = function(includeInstance, msg) {
  var f, obj = {
    space: (f = msg.getSpace()) && proto.koinos.chain.object_space.toObject(includeInstance, f),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.database_key}
 */
proto.koinos.chain.database_key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.database_key;
  return proto.koinos.chain.database_key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.database_key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.database_key}
 */
proto.koinos.chain.database_key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.chain.object_space;
      reader.readMessage(value,proto.koinos.chain.object_space.deserializeBinaryFromReader);
      msg.setSpace(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.database_key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.database_key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.database_key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.database_key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.chain.object_space.serializeBinaryToWriter
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional object_space space = 1;
 * @return {?proto.koinos.chain.object_space}
 */
proto.koinos.chain.database_key.prototype.getSpace = function() {
  return /** @type{?proto.koinos.chain.object_space} */ (
    jspb.Message.getWrapperField(this, proto.koinos.chain.object_space, 1));
};


/**
 * @param {?proto.koinos.chain.object_space|undefined} value
 * @return {!proto.koinos.chain.database_key} returns this
*/
proto.koinos.chain.database_key.prototype.setSpace = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.chain.database_key} returns this
 */
proto.koinos.chain.database_key.prototype.clearSpace = function() {
  return this.setSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.chain.database_key.prototype.hasSpace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.chain.database_key.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.koinos.chain.database_key.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.koinos.chain.database_key.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.chain.database_key} returns this
 */
proto.koinos.chain.database_key.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.max_account_resources.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.max_account_resources.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.max_account_resources} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.max_account_resources.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.max_account_resources}
 */
proto.koinos.chain.max_account_resources.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.max_account_resources;
  return proto.koinos.chain.max_account_resources.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.max_account_resources} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.max_account_resources}
 */
proto.koinos.chain.max_account_resources.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.max_account_resources.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.max_account_resources.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.max_account_resources} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.max_account_resources.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {string}
 */
proto.koinos.chain.max_account_resources.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.max_account_resources} returns this
 */
proto.koinos.chain.max_account_resources.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.head_info.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.head_info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.head_info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.head_info.toObject = function(includeInstance, msg) {
  var f, obj = {
    headTopology: (f = msg.getHeadTopology()) && proto.koinos.block_topology.toObject(includeInstance, f),
    headBlockTime: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    lastIrreversibleBlock: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.head_info}
 */
proto.koinos.chain.head_info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.head_info;
  return proto.koinos.chain.head_info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.head_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.head_info}
 */
proto.koinos.chain.head_info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.block_topology;
      reader.readMessage(value,proto.koinos.block_topology.deserializeBinaryFromReader);
      msg.setHeadTopology(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setHeadBlockTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLastIrreversibleBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.head_info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.head_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.head_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.head_info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadTopology();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.block_topology.serializeBinaryToWriter
    );
  }
  f = message.getHeadBlockTime();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getLastIrreversibleBlock();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
};


/**
 * optional koinos.block_topology head_topology = 1;
 * @return {?proto.koinos.block_topology}
 */
proto.koinos.chain.head_info.prototype.getHeadTopology = function() {
  return /** @type{?proto.koinos.block_topology} */ (
    jspb.Message.getWrapperField(this, proto.koinos.block_topology, 1));
};


/**
 * @param {?proto.koinos.block_topology|undefined} value
 * @return {!proto.koinos.chain.head_info} returns this
*/
proto.koinos.chain.head_info.prototype.setHeadTopology = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.chain.head_info} returns this
 */
proto.koinos.chain.head_info.prototype.clearHeadTopology = function() {
  return this.setHeadTopology(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.chain.head_info.prototype.hasHeadTopology = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 head_block_time = 2;
 * @return {string}
 */
proto.koinos.chain.head_info.prototype.getHeadBlockTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.head_info} returns this
 */
proto.koinos.chain.head_info.prototype.setHeadBlockTime = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 last_irreversible_block = 3;
 * @return {string}
 */
proto.koinos.chain.head_info.prototype.getLastIrreversibleBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.head_info} returns this
 */
proto.koinos.chain.head_info.prototype.setLastIrreversibleBlock = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.caller_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.caller_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.caller_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.caller_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    caller: msg.getCaller_asB64(),
    callerPrivilege: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.caller_data}
 */
proto.koinos.chain.caller_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.caller_data;
  return proto.koinos.chain.caller_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.caller_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.caller_data}
 */
proto.koinos.chain.caller_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCaller(value);
      break;
    case 2:
      var value = /** @type {!proto.koinos.chain.privilege} */ (reader.readEnum());
      msg.setCallerPrivilege(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.caller_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.caller_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.caller_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.caller_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaller_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCallerPrivilege();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bytes caller = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.chain.caller_data.prototype.getCaller = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes caller = 1;
 * This is a type-conversion wrapper around `getCaller()`
 * @return {string}
 */
proto.koinos.chain.caller_data.prototype.getCaller_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCaller()));
};


/**
 * optional bytes caller = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCaller()`
 * @return {!Uint8Array}
 */
proto.koinos.chain.caller_data.prototype.getCaller_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCaller()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.chain.caller_data} returns this
 */
proto.koinos.chain.caller_data.prototype.setCaller = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional privilege caller_privilege = 2;
 * @return {!proto.koinos.chain.privilege}
 */
proto.koinos.chain.caller_data.prototype.getCallerPrivilege = function() {
  return /** @type {!proto.koinos.chain.privilege} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.koinos.chain.privilege} value
 * @return {!proto.koinos.chain.caller_data} returns this
 */
proto.koinos.chain.caller_data.prototype.setCallerPrivilege = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.resource_limit_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.resource_limit_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.resource_limit_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.resource_limit_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    diskStorageLimit: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    diskStorageCost: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    networkBandwidthLimit: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    networkBandwidthCost: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    computeBandwidthLimit: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    computeBandwidthCost: jspb.Message.getFieldWithDefault(msg, 6, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.resource_limit_data}
 */
proto.koinos.chain.resource_limit_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.resource_limit_data;
  return proto.koinos.chain.resource_limit_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.resource_limit_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.resource_limit_data}
 */
proto.koinos.chain.resource_limit_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDiskStorageLimit(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDiskStorageCost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNetworkBandwidthLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNetworkBandwidthCost(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setComputeBandwidthLimit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setComputeBandwidthCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.resource_limit_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.resource_limit_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.resource_limit_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.resource_limit_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiskStorageLimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getDiskStorageCost();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getNetworkBandwidthLimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getNetworkBandwidthCost();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getComputeBandwidthLimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getComputeBandwidthCost();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
};


/**
 * optional uint64 disk_storage_limit = 1;
 * @return {string}
 */
proto.koinos.chain.resource_limit_data.prototype.getDiskStorageLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.resource_limit_data} returns this
 */
proto.koinos.chain.resource_limit_data.prototype.setDiskStorageLimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 disk_storage_cost = 2;
 * @return {string}
 */
proto.koinos.chain.resource_limit_data.prototype.getDiskStorageCost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.resource_limit_data} returns this
 */
proto.koinos.chain.resource_limit_data.prototype.setDiskStorageCost = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 network_bandwidth_limit = 3;
 * @return {string}
 */
proto.koinos.chain.resource_limit_data.prototype.getNetworkBandwidthLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.resource_limit_data} returns this
 */
proto.koinos.chain.resource_limit_data.prototype.setNetworkBandwidthLimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint64 network_bandwidth_cost = 4;
 * @return {string}
 */
proto.koinos.chain.resource_limit_data.prototype.getNetworkBandwidthCost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.resource_limit_data} returns this
 */
proto.koinos.chain.resource_limit_data.prototype.setNetworkBandwidthCost = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint64 compute_bandwidth_limit = 5;
 * @return {string}
 */
proto.koinos.chain.resource_limit_data.prototype.getComputeBandwidthLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.resource_limit_data} returns this
 */
proto.koinos.chain.resource_limit_data.prototype.setComputeBandwidthLimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 compute_bandwidth_cost = 6;
 * @return {string}
 */
proto.koinos.chain.resource_limit_data.prototype.getComputeBandwidthCost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.resource_limit_data} returns this
 */
proto.koinos.chain.resource_limit_data.prototype.setComputeBandwidthCost = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.contract_metadata_object.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.contract_metadata_object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.contract_metadata_object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.contract_metadata_object.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    system: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    authorizesCallContract: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    authorizesTransacionApplication: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    authorizesUploadContract: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.contract_metadata_object}
 */
proto.koinos.chain.contract_metadata_object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.contract_metadata_object;
  return proto.koinos.chain.contract_metadata_object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.contract_metadata_object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.contract_metadata_object}
 */
proto.koinos.chain.contract_metadata_object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSystem(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizesCallContract(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizesTransacionApplication(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizesUploadContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.contract_metadata_object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.contract_metadata_object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.contract_metadata_object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.contract_metadata_object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSystem();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAuthorizesCallContract();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAuthorizesTransacionApplication();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAuthorizesUploadContract();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.chain.contract_metadata_object.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.koinos.chain.contract_metadata_object.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.koinos.chain.contract_metadata_object.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.chain.contract_metadata_object} returns this
 */
proto.koinos.chain.contract_metadata_object.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool system = 2;
 * @return {boolean}
 */
proto.koinos.chain.contract_metadata_object.prototype.getSystem = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.chain.contract_metadata_object} returns this
 */
proto.koinos.chain.contract_metadata_object.prototype.setSystem = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool authorizes_call_contract = 3;
 * @return {boolean}
 */
proto.koinos.chain.contract_metadata_object.prototype.getAuthorizesCallContract = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.chain.contract_metadata_object} returns this
 */
proto.koinos.chain.contract_metadata_object.prototype.setAuthorizesCallContract = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool authorizes_transacion_application = 4;
 * @return {boolean}
 */
proto.koinos.chain.contract_metadata_object.prototype.getAuthorizesTransacionApplication = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.chain.contract_metadata_object} returns this
 */
proto.koinos.chain.contract_metadata_object.prototype.setAuthorizesTransacionApplication = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool authorizes_upload_contract = 5;
 * @return {boolean}
 */
proto.koinos.chain.contract_metadata_object.prototype.getAuthorizesUploadContract = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.koinos.chain.contract_metadata_object} returns this
 */
proto.koinos.chain.contract_metadata_object.prototype.setAuthorizesUploadContract = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.compute_bandwidth_entry.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.compute_bandwidth_entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.compute_bandwidth_entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.compute_bandwidth_entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    compute: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.compute_bandwidth_entry}
 */
proto.koinos.chain.compute_bandwidth_entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.compute_bandwidth_entry;
  return proto.koinos.chain.compute_bandwidth_entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.compute_bandwidth_entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.compute_bandwidth_entry}
 */
proto.koinos.chain.compute_bandwidth_entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.compute_bandwidth_entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.compute_bandwidth_entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.compute_bandwidth_entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.compute_bandwidth_entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompute();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.koinos.chain.compute_bandwidth_entry.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.koinos.chain.compute_bandwidth_entry} returns this
 */
proto.koinos.chain.compute_bandwidth_entry.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 compute = 2;
 * @return {number}
 */
proto.koinos.chain.compute_bandwidth_entry.prototype.getCompute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.koinos.chain.compute_bandwidth_entry} returns this
 */
proto.koinos.chain.compute_bandwidth_entry.prototype.setCompute = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.chain.compute_bandwidth_registry.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.compute_bandwidth_registry.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.compute_bandwidth_registry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.compute_bandwidth_registry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.compute_bandwidth_registry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.koinos.chain.compute_bandwidth_entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.compute_bandwidth_registry}
 */
proto.koinos.chain.compute_bandwidth_registry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.compute_bandwidth_registry;
  return proto.koinos.chain.compute_bandwidth_registry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.compute_bandwidth_registry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.compute_bandwidth_registry}
 */
proto.koinos.chain.compute_bandwidth_registry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.chain.compute_bandwidth_entry;
      reader.readMessage(value,proto.koinos.chain.compute_bandwidth_entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.compute_bandwidth_registry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.compute_bandwidth_registry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.compute_bandwidth_registry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.compute_bandwidth_registry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.koinos.chain.compute_bandwidth_entry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated compute_bandwidth_entry entries = 1;
 * @return {!Array<!proto.koinos.chain.compute_bandwidth_entry>}
 */
proto.koinos.chain.compute_bandwidth_registry.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.koinos.chain.compute_bandwidth_entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.chain.compute_bandwidth_entry, 1));
};


/**
 * @param {!Array<!proto.koinos.chain.compute_bandwidth_entry>} value
 * @return {!proto.koinos.chain.compute_bandwidth_registry} returns this
*/
proto.koinos.chain.compute_bandwidth_registry.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.koinos.chain.compute_bandwidth_entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.chain.compute_bandwidth_entry}
 */
proto.koinos.chain.compute_bandwidth_registry.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.koinos.chain.compute_bandwidth_entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.chain.compute_bandwidth_registry} returns this
 */
proto.koinos.chain.compute_bandwidth_registry.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.genesis_entry.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.genesis_entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.genesis_entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.genesis_entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    space: (f = msg.getSpace()) && proto.koinos.chain.object_space.toObject(includeInstance, f),
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.genesis_entry}
 */
proto.koinos.chain.genesis_entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.genesis_entry;
  return proto.koinos.chain.genesis_entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.genesis_entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.genesis_entry}
 */
proto.koinos.chain.genesis_entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.chain.object_space;
      reader.readMessage(value,proto.koinos.chain.object_space.deserializeBinaryFromReader);
      msg.setSpace(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.genesis_entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.genesis_entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.genesis_entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.genesis_entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.chain.object_space.serializeBinaryToWriter
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional object_space space = 1;
 * @return {?proto.koinos.chain.object_space}
 */
proto.koinos.chain.genesis_entry.prototype.getSpace = function() {
  return /** @type{?proto.koinos.chain.object_space} */ (
    jspb.Message.getWrapperField(this, proto.koinos.chain.object_space, 1));
};


/**
 * @param {?proto.koinos.chain.object_space|undefined} value
 * @return {!proto.koinos.chain.genesis_entry} returns this
*/
proto.koinos.chain.genesis_entry.prototype.setSpace = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.chain.genesis_entry} returns this
 */
proto.koinos.chain.genesis_entry.prototype.clearSpace = function() {
  return this.setSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.chain.genesis_entry.prototype.hasSpace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.chain.genesis_entry.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.koinos.chain.genesis_entry.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.koinos.chain.genesis_entry.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.chain.genesis_entry} returns this
 */
proto.koinos.chain.genesis_entry.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.chain.genesis_entry.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.koinos.chain.genesis_entry.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.koinos.chain.genesis_entry.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.chain.genesis_entry} returns this
 */
proto.koinos.chain.genesis_entry.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.koinos.chain.genesis_data.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.chain.genesis_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.chain.genesis_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.chain.genesis_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.genesis_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.koinos.chain.genesis_entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.chain.genesis_data}
 */
proto.koinos.chain.genesis_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.chain.genesis_data;
  return proto.koinos.chain.genesis_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.chain.genesis_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.chain.genesis_data}
 */
proto.koinos.chain.genesis_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.chain.genesis_entry;
      reader.readMessage(value,proto.koinos.chain.genesis_entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.chain.genesis_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.chain.genesis_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.chain.genesis_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.chain.genesis_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.koinos.chain.genesis_entry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated genesis_entry entries = 1;
 * @return {!Array<!proto.koinos.chain.genesis_entry>}
 */
proto.koinos.chain.genesis_data.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.koinos.chain.genesis_entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.koinos.chain.genesis_entry, 1));
};


/**
 * @param {!Array<!proto.koinos.chain.genesis_entry>} value
 * @return {!proto.koinos.chain.genesis_data} returns this
*/
proto.koinos.chain.genesis_data.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.koinos.chain.genesis_entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.koinos.chain.genesis_entry}
 */
proto.koinos.chain.genesis_data.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.koinos.chain.genesis_entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.koinos.chain.genesis_data} returns this
 */
proto.koinos.chain.genesis_data.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * @enum {number}
 */
proto.koinos.chain.privilege = {
  KERNEL_MODE: 0,
  USER_MODE: 1
};

