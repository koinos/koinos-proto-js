// source: koinos/contracts/pow/pow.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.koinos.contracts.pow.difficulty_metadata');
goog.provide('proto.koinos.contracts.pow.get_difficulty_metadata_arguments');
goog.provide('proto.koinos.contracts.pow.get_difficulty_metadata_result');
goog.provide('proto.koinos.contracts.pow.pow_signature_data');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.contracts.pow.difficulty_metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.contracts.pow.difficulty_metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.contracts.pow.difficulty_metadata.displayName = 'proto.koinos.contracts.pow.difficulty_metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.contracts.pow.get_difficulty_metadata_arguments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.contracts.pow.get_difficulty_metadata_arguments.displayName = 'proto.koinos.contracts.pow.get_difficulty_metadata_arguments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.contracts.pow.get_difficulty_metadata_result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.contracts.pow.get_difficulty_metadata_result.displayName = 'proto.koinos.contracts.pow.get_difficulty_metadata_result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.koinos.contracts.pow.pow_signature_data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.koinos.contracts.pow.pow_signature_data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.koinos.contracts.pow.pow_signature_data.displayName = 'proto.koinos.contracts.pow.pow_signature_data';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.contracts.pow.difficulty_metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.contracts.pow.difficulty_metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.difficulty_metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: msg.getTarget_asB64(),
    lastBlockTime: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    difficulty: msg.getDifficulty_asB64(),
    targetBlockInterval: jspb.Message.getFieldWithDefault(msg, 4, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.contracts.pow.difficulty_metadata}
 */
proto.koinos.contracts.pow.difficulty_metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.contracts.pow.difficulty_metadata;
  return proto.koinos.contracts.pow.difficulty_metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.contracts.pow.difficulty_metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.contracts.pow.difficulty_metadata}
 */
proto.koinos.contracts.pow.difficulty_metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLastBlockTime(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDifficulty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTargetBlockInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.contracts.pow.difficulty_metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.contracts.pow.difficulty_metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.difficulty_metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLastBlockTime();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getDifficulty_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTargetBlockInterval();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
};


/**
 * optional bytes target = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getTarget = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes target = 1;
 * This is a type-conversion wrapper around `getTarget()`
 * @return {string}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getTarget_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTarget()));
};


/**
 * optional bytes target = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTarget()`
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getTarget_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTarget()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.contracts.pow.difficulty_metadata} returns this
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.setTarget = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 last_block_time = 2;
 * @return {string}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getLastBlockTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.contracts.pow.difficulty_metadata} returns this
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.setLastBlockTime = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bytes difficulty = 3;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getDifficulty = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes difficulty = 3;
 * This is a type-conversion wrapper around `getDifficulty()`
 * @return {string}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getDifficulty_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDifficulty()));
};


/**
 * optional bytes difficulty = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDifficulty()`
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getDifficulty_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDifficulty()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.contracts.pow.difficulty_metadata} returns this
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 target_block_interval = 4;
 * @return {string}
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.getTargetBlockInterval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.koinos.contracts.pow.difficulty_metadata} returns this
 */
proto.koinos.contracts.pow.difficulty_metadata.prototype.setTargetBlockInterval = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.contracts.pow.get_difficulty_metadata_arguments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.contracts.pow.get_difficulty_metadata_arguments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.contracts.pow.get_difficulty_metadata_arguments}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.contracts.pow.get_difficulty_metadata_arguments;
  return proto.koinos.contracts.pow.get_difficulty_metadata_arguments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.contracts.pow.get_difficulty_metadata_arguments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.contracts.pow.get_difficulty_metadata_arguments}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.contracts.pow.get_difficulty_metadata_arguments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.contracts.pow.get_difficulty_metadata_arguments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.get_difficulty_metadata_arguments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.contracts.pow.get_difficulty_metadata_result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.contracts.pow.get_difficulty_metadata_result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.koinos.contracts.pow.difficulty_metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.contracts.pow.get_difficulty_metadata_result}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.contracts.pow.get_difficulty_metadata_result;
  return proto.koinos.contracts.pow.get_difficulty_metadata_result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.contracts.pow.get_difficulty_metadata_result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.contracts.pow.get_difficulty_metadata_result}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.koinos.contracts.pow.difficulty_metadata;
      reader.readMessage(value,proto.koinos.contracts.pow.difficulty_metadata.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.contracts.pow.get_difficulty_metadata_result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.contracts.pow.get_difficulty_metadata_result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.koinos.contracts.pow.difficulty_metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional difficulty_metadata value = 1;
 * @return {?proto.koinos.contracts.pow.difficulty_metadata}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.prototype.getValue = function() {
  return /** @type{?proto.koinos.contracts.pow.difficulty_metadata} */ (
    jspb.Message.getWrapperField(this, proto.koinos.contracts.pow.difficulty_metadata, 1));
};


/**
 * @param {?proto.koinos.contracts.pow.difficulty_metadata|undefined} value
 * @return {!proto.koinos.contracts.pow.get_difficulty_metadata_result} returns this
*/
proto.koinos.contracts.pow.get_difficulty_metadata_result.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.koinos.contracts.pow.get_difficulty_metadata_result} returns this
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.koinos.contracts.pow.get_difficulty_metadata_result.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.toObject = function(opt_includeInstance) {
  return proto.koinos.contracts.pow.pow_signature_data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.koinos.contracts.pow.pow_signature_data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.pow_signature_data.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    recoverableSignature: msg.getRecoverableSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.koinos.contracts.pow.pow_signature_data}
 */
proto.koinos.contracts.pow.pow_signature_data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.koinos.contracts.pow.pow_signature_data;
  return proto.koinos.contracts.pow.pow_signature_data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.koinos.contracts.pow.pow_signature_data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.koinos.contracts.pow.pow_signature_data}
 */
proto.koinos.contracts.pow.pow_signature_data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecoverableSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.koinos.contracts.pow.pow_signature_data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.koinos.contracts.pow.pow_signature_data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.koinos.contracts.pow.pow_signature_data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecoverableSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.contracts.pow.pow_signature_data} returns this
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes recoverable_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.getRecoverableSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes recoverable_signature = 2;
 * This is a type-conversion wrapper around `getRecoverableSignature()`
 * @return {string}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.getRecoverableSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecoverableSignature()));
};


/**
 * optional bytes recoverable_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecoverableSignature()`
 * @return {!Uint8Array}
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.getRecoverableSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecoverableSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.koinos.contracts.pow.pow_signature_data} returns this
 */
proto.koinos.contracts.pow.pow_signature_data.prototype.setRecoverableSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


